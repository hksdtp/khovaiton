#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np

def regenerate_csv_with_status():
    """T√°i t·∫°o file CSV v·ªõi logic status m·ªõi"""
    
    try:
        # ƒê·ªçc file Excel v·ªõi header ƒë√∫ng
        print("ƒêang ƒë·ªçc file anhhung.xlsx...")
        df = pd.read_excel('anhhung.xlsx', header=1)
        
        print(f"‚úÖ ƒê·ªçc th√†nh c√¥ng {len(df)} d√≤ng d·ªØ li·ªáu")
        
        # Ph√¢n t√≠ch tr·∫°ng th√°i tr∆∞·ªõc khi x·ª≠ l√Ω
        print("\nüìä PH√ÇN T√çCH TR·∫†NG TH√ÅI TR∆Ø·ªöC KHI X·ª¨ L√ù:")
        if 'T√≠nh tr·∫°ng' in df.columns:
            tinh_trang_col = df['T√≠nh tr·∫°ng']
            print(f"   ‚Ä¢ S·ªë d√≤ng c√≥ t√¨nh tr·∫°ng: {tinh_trang_col.notna().sum()}")
            print(f"   ‚Ä¢ S·ªë d√≤ng tr·ªëng: {tinh_trang_col.isna().sum()}")
            
            # Hi·ªÉn th·ªã c√°c t√¨nh tr·∫°ng duy nh·∫•t
            unique_conditions = tinh_trang_col.dropna().unique()
            print(f"   ‚Ä¢ C√°c t√¨nh tr·∫°ng duy nh·∫•t:")
            for condition in unique_conditions:
                count = (tinh_trang_col == condition).sum()
                print(f"     - '{condition}': {count} d√≤ng")
        
        # √Åp d·ª•ng logic status m·ªõi
        print("\nüîÑ √ÅP D·ª§NG LOGIC STATUS M·ªöI:")
        
        def determine_status(row):
            """X√°c ƒë·ªãnh status d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† t√¨nh tr·∫°ng"""
            quantity = row.get('S·ªë l∆∞·ª£ng ', 0) or 0
            condition = row.get('T√≠nh tr·∫°ng', '')
            
            # M·∫∑c ƒë·ªãnh l√† available
            status = 'available'
            
            # Ki·ªÉm tra s·ªë l∆∞·ª£ng
            if quantity == 0:
                status = 'out_of_stock'
            elif quantity < 10:
                status = 'low_stock'
            
            # Ki·ªÉm tra t√¨nh tr·∫°ng (∆∞u ti√™n cao h∆°n)
            if condition and isinstance(condition, str):
                condition_lower = condition.lower()
                
                if ('l·ªói' in condition_lower or 
                    'b·∫©n' in condition_lower or 
                    'm·ªëc' in condition_lower or
                    'h·ªèng' in condition_lower or
                    'loang' in condition_lower):
                    status = 'damaged'
                # V·∫£i t·ªìn c≈© v·∫´n gi·ªØ nguy√™n status d·ª±a tr√™n quantity
                elif 't·ªìn c≈©' in condition_lower:
                    pass  # Gi·ªØ nguy√™n status
            
            return status
        
        # √Åp d·ª•ng logic cho t·ª´ng d√≤ng
        df['Status_Computed'] = df.apply(determine_status, axis=1)
        
        # Th·ªëng k√™ status m·ªõi
        status_counts = df['Status_Computed'].value_counts()
        print(f"   üìà Th·ªëng k√™ status sau khi x·ª≠ l√Ω:")
        for status, count in status_counts.items():
            percentage = count / len(df) * 100
            print(f"     - {status}: {count} d√≤ng ({percentage:.1f}%)")
        
        # L∆∞u file CSV m·ªõi
        print(f"\nüíæ L∆ØU FILE CSV M·ªöI:")
        output_file = 'anhhung_with_status.csv'
        df.to_csv(output_file, index=False, encoding='utf-8')
        print(f"   ‚úÖ ƒê√£ l∆∞u: {output_file}")
        
        # Hi·ªÉn th·ªã m·∫´u d·ªØ li·ªáu
        print(f"\nüìã M·∫™U D·ªÆ LI·ªÜU (5 d√≤ng ƒë·∫ßu):")
        sample_cols = ['M√£ h√†ng', 'T√™n h√†ng', 'S·ªë l∆∞·ª£ng ', 'T√≠nh tr·∫°ng', 'Status_Computed']
        available_cols = [col for col in sample_cols if col in df.columns]
        
        for idx, row in df.head().iterrows():
            print(f"\nD√≤ng {idx + 2}:")
            for col in available_cols:
                value = row[col]
                if pd.isna(value):
                    value = "[TR·ªêNG]"
                print(f"   {col}: {value}")
        
        # Ph√¢n t√≠ch chi ti·∫øt c√°c tr∆∞·ªùng h·ª£p damaged
        print(f"\nüîç PH√ÇN T√çCH CHI TI·∫æT C√ÅC TR∆Ø·ªúNG H·ª¢P DAMAGED:")
        damaged_fabrics = df[df['Status_Computed'] == 'damaged']
        if len(damaged_fabrics) > 0:
            print(f"   ‚Ä¢ T·ªïng s·ªë v·∫£i damaged: {len(damaged_fabrics)}")
            
            # Nh√≥m theo t√¨nh tr·∫°ng
            condition_groups = damaged_fabrics['T√≠nh tr·∫°ng'].value_counts()
            print(f"   ‚Ä¢ Ph√¢n nh√≥m theo t√¨nh tr·∫°ng:")
            for condition, count in condition_groups.items():
                print(f"     - '{condition}': {count} d√≤ng")
            
            # M·∫´u 5 d√≤ng damaged
            print(f"   ‚Ä¢ M·∫´u 5 d√≤ng damaged:")
            for idx, row in damaged_fabrics.head().iterrows():
                ma_hang = row.get('M√£ h√†ng', 'N/A')
                so_luong = row.get('S·ªë l∆∞·ª£ng ', 'N/A')
                tinh_trang = row.get('T√≠nh tr·∫°ng', 'N/A')
                print(f"     - {ma_hang} | SL: {so_luong} | T√¨nh tr·∫°ng: {tinh_trang}")
        
        # Ph√¢n t√≠ch c√°c tr∆∞·ªùng h·ª£p kh√¥ng c√≥ t√¨nh tr·∫°ng
        print(f"\nüìù PH√ÇN T√çCH C√ÅC TR∆Ø·ªúNG H·ª¢P KH√îNG C√ì T√åNH TR·∫†NG:")
        no_condition = df[df['T√≠nh tr·∫°ng'].isna()]
        if len(no_condition) > 0:
            print(f"   ‚Ä¢ T·ªïng s·ªë v·∫£i kh√¥ng c√≥ t√¨nh tr·∫°ng: {len(no_condition)}")
            
            # Ph√¢n nh√≥m theo status
            status_groups = no_condition['Status_Computed'].value_counts()
            print(f"   ‚Ä¢ Ph√¢n nh√≥m theo status:")
            for status, count in status_groups.items():
                print(f"     - {status}: {count} d√≤ng")
        
        print(f"\n‚úÖ Ho√†n t·∫•t! File CSV m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o v·ªõi logic status c·∫≠p nh·∫≠t.")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói: {str(e)}")
        return False

if __name__ == "__main__":
    regenerate_csv_with_status()
