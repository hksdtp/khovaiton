#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import sys

def analyze_fabric_data():
    """Ph√¢n t√≠ch chi ti·∫øt d·ªØ li·ªáu v·∫£i t·ª´ file Excel"""
    
    try:
        # ƒê·ªçc file Excel v·ªõi header ·ªü d√≤ng 1 (0-indexed)
        print("ƒêang ƒë·ªçc file anhhung.xlsx...")
        df = pd.read_excel('anhhung.xlsx', header=1)
        
        print('=' * 60)
        print('PH√ÇN T√çCH CHI TI·∫æT D·ªÆ LI·ªÜU V·∫¢I T·ªíN KHO')
        print('=' * 60)
        
        # Th√¥ng tin t·ªïng quan
        print(f'\nüìä TH√îNG TIN T·ªîNG QUAN:')
        print(f'   ‚Ä¢ T·ªïng s·ªë d√≤ng d·ªØ li·ªáu: {len(df):,}')
        print(f'   ‚Ä¢ T·ªïng s·ªë c·ªôt: {len(df.columns)}')
        print(f'   ‚Ä¢ T√™n c√°c c·ªôt: {list(df.columns)}')
        
        # Ph√¢n t√≠ch c·ªôt T√≠nh tr·∫°ng
        print(f'\nüîç PH√ÇN T√çCH C·ªòT "T√≠nh tr·∫°ng":')
        if 'T√≠nh tr·∫°ng' in df.columns:
            tinh_trang_col = df['T√≠nh tr·∫°ng']
            co_gia_tri = tinh_trang_col.notna().sum()
            trong = tinh_trang_col.isna().sum()
            
            print(f'   ‚Ä¢ S·ªë d√≤ng c√≥ gi√° tr·ªã: {co_gia_tri:,} ({co_gia_tri/len(df)*100:.1f}%)')
            print(f'   ‚Ä¢ S·ªë d√≤ng tr·ªëng: {trong:,} ({trong/len(df)*100:.1f}%)')
            
            if co_gia_tri > 0:
                print(f'\n   üìã C√°c tr·∫°ng th√°i duy nh·∫•t:')
                unique_values = tinh_trang_col.dropna().unique()
                for i, val in enumerate(unique_values, 1):
                    count = (tinh_trang_col == val).sum()
                    print(f'      {i}. "{val}" ‚Üí {count:,} d√≤ng ({count/len(df)*100:.1f}%)')
            
            # M·∫´u d√≤ng tr·ªëng
            if trong > 0:
                print(f'\n   üìù M·∫´u 5 d√≤ng c√≥ t√≠nh tr·∫°ng tr·ªëng:')
                empty_rows = df[tinh_trang_col.isna()]
                for idx, row in empty_rows.head().iterrows():
                    ma_hang = row.get('M√£ h√†ng', 'N/A')
                    ten_hang = row.get('T√™n h√†ng', 'N/A')
                    so_luong = row.get('S·ªë l∆∞·ª£ng ', 'N/A')
                    print(f'      ‚Ä¢ D√≤ng {idx+2}: {ma_hang} | SL: {so_luong} | {ten_hang[:50]}...')
        else:
            print('   ‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt "T√≠nh tr·∫°ng"')
        
        # Ph√¢n t√≠ch s·ªë l∆∞·ª£ng t·ªìn
        print(f'\nüì¶ PH√ÇN T√çCH S·ªê L∆Ø·ª¢NG T·ªíN:')
        so_luong_cols = [col for col in df.columns if 's·ªë l∆∞·ª£ng' in col.lower()]
        if so_luong_cols:
            so_luong_col = df[so_luong_cols[0]]
            print(f'   ‚Ä¢ C·ªôt s·ªë l∆∞·ª£ng: "{so_luong_cols[0]}"')
            print(f'   ‚Ä¢ T·ªïng s·ªë l∆∞·ª£ng t·ªìn: {so_luong_col.sum():,.2f}')
            print(f'   ‚Ä¢ S·ªë l∆∞·ª£ng trung b√¨nh: {so_luong_col.mean():.2f}')
            print(f'   ‚Ä¢ S·ªë l∆∞·ª£ng l·ªõn nh·∫•t: {so_luong_col.max():,.2f}')
            print(f'   ‚Ä¢ S·ªë l∆∞·ª£ng nh·ªè nh·∫•t: {so_luong_col.min():.2f}')
            
            # Top 5 m√£ v·∫£i c√≥ s·ªë l∆∞·ª£ng l·ªõn nh·∫•t
            print(f'\n   üîù Top 5 m√£ v·∫£i c√≥ s·ªë l∆∞·ª£ng l·ªõn nh·∫•t:')
            top_5 = df.nlargest(5, so_luong_cols[0])
            for idx, row in top_5.iterrows():
                ma_hang = row.get('M√£ h√†ng', 'N/A')
                so_luong = row.get(so_luong_cols[0], 0)
                print(f'      ‚Ä¢ {ma_hang}: {so_luong:,.2f}')
        else:
            print('   ‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt s·ªë l∆∞·ª£ng')
        
        # Ph√¢n t√≠ch lo·∫°i v·∫£i
        print(f'\nüßµ PH√ÇN T√çCH LO·∫†I V·∫¢I:')
        if 'Lo·∫°i V·∫£i' in df.columns:
            loai_vai_col = df['Lo·∫°i V·∫£i']
            co_gia_tri = loai_vai_col.notna().sum()
            trong = loai_vai_col.isna().sum()
            
            print(f'   ‚Ä¢ S·ªë d√≤ng c√≥ lo·∫°i v·∫£i: {co_gia_tri:,} ({co_gia_tri/len(df)*100:.1f}%)')
            print(f'   ‚Ä¢ S·ªë d√≤ng tr·ªëng lo·∫°i v·∫£i: {trong:,} ({trong/len(df)*100:.1f}%)')
            
            if co_gia_tri > 0:
                print(f'\n   üìã C√°c lo·∫°i v·∫£i:')
                for val in loai_vai_col.dropna().unique():
                    count = (loai_vai_col == val).sum()
                    print(f'      ‚Ä¢ "{val}": {count:,} d√≤ng ({count/len(df)*100:.1f}%)')
        else:
            print('   ‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt "Lo·∫°i V·∫£i"')
        
        # Ph√¢n t√≠ch v·ªã tr√≠
        print(f'\nüìç PH√ÇN T√çCH V·ªä TR√ç:')
        if 'V·ªã tr√≠' in df.columns:
            vi_tri_col = df['V·ªã tr√≠']
            co_gia_tri = vi_tri_col.notna().sum()
            trong = vi_tri_col.isna().sum()
            
            print(f'   ‚Ä¢ S·ªë d√≤ng c√≥ v·ªã tr√≠: {co_gia_tri:,} ({co_gia_tri/len(df)*100:.1f}%)')
            print(f'   ‚Ä¢ S·ªë d√≤ng tr·ªëng v·ªã tr√≠: {trong:,} ({trong/len(df)*100:.1f}%)')
            
            if co_gia_tri > 0:
                print(f'\n   üìã Top 10 v·ªã tr√≠ ph·ªï bi·∫øn:')
                vi_tri_counts = vi_tri_col.value_counts().head(10)
                for vi_tri, count in vi_tri_counts.items():
                    print(f'      ‚Ä¢ "{vi_tri}": {count:,} d√≤ng')
        
        # M·∫´u d·ªØ li·ªáu
        print(f'\nüìã M·∫™U D·ªÆ LI·ªÜU (3 d√≤ng ƒë·∫ßu):')
        print('-' * 80)
        for idx, row in df.head(3).iterrows():
            print(f'D√≤ng {idx+2}:')
            for col in df.columns:
                value = row[col]
                if pd.isna(value):
                    value = "[TR·ªêNG]"
                print(f'   {col}: {value}')
            print('-' * 40)
        
        # Ki·ªÉm tra d·ªØ li·ªáu thi·∫øu
        print(f'\n‚ö†Ô∏è  KI·ªÇM TRA D·ªÆ LI·ªÜU THI·∫æU:')
        missing_data = df.isnull().sum()
        for col, missing_count in missing_data.items():
            if missing_count > 0:
                percentage = missing_count / len(df) * 100
                print(f'   ‚Ä¢ {col}: {missing_count:,} d√≤ng thi·∫øu ({percentage:.1f}%)')
        
        print(f'\n‚úÖ Ph√¢n t√≠ch ho√†n t·∫•t!')
        
    except FileNotFoundError:
        print("‚ùå Kh√¥ng t√¨m th·∫•y file anhhung.xlsx")
        return False
    except Exception as e:
        print(f"‚ùå L·ªói khi ph√¢n t√≠ch: {str(e)}")
        return False
    
    return True

if __name__ == "__main__":
    analyze_fabric_data()
