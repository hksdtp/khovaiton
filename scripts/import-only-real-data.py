#!/usr/bin/env python3
"""
Script ƒë·ªÉ import ch·ªâ d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx v√†o Supabase
Kh√¥ng import d·ªØ li·ªáu ·∫£o
"""

import openpyxl
import json
import urllib.request
import urllib.parse
import re
from pathlib import Path
from datetime import datetime

# Supabase configuration
SUPABASE_URL = 'https://zgrfqkytbmahxcbgpkxx.supabase.co'
SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpncmZxa3l0Ym1haHhjYmdwa3h4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNjI1MTAsImV4cCI6MjA2MTczODUxMH0.a6giZZFMrj6jBhLip3ShOFCyTHt5dbe31UDGCECh0Zs'

def is_valid_fabric_code(code):
    """Ki·ªÉm tra xem c√≥ ph·∫£i m√£ v·∫£i h·ª£p l·ªá kh√¥ng"""
    if not code or not isinstance(code, str):
        return False
    
    code = str(code).strip()
    
    # Lo·∫°i b·ªè c√°c d√≤ng ghi ch√∫
    invalid_patterns = [
        r'^[0-9]+\.',  # B·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† d·∫•u ch·∫•m
        r'l∆∞u √Ω',
        r'v·∫£i ƒë∆∞·ª£c ki·ªÉm tra',
        r's·ªë l∆∞·ª£ng v·∫£i',
        r'ch∆∞a ki·ªÉm tra',
        r'ph∆∞∆°ng ph√°p',
        r'ki·ªÉm k√™',
        r'ch·∫•t l∆∞·ª£ng',
        r'ngo·∫°i quan'
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, code.lower()):
            return False
    
    if len(code) < 2 or len(code) > 100:
        return False
    
    if not re.search(r'[a-zA-Z0-9]', code):
        return False
    
    return True

def normalize_quantity(qty_str):
    """Chu·∫©n h√≥a s·ªë l∆∞·ª£ng"""
    if not qty_str:
        return 0
    
    try:
        qty_str = str(qty_str).strip()
        return float(qty_str)
    except:
        return 0

def normalize_status(status_str):
    """Chu·∫©n h√≥a tr·∫°ng th√°i"""
    if not status_str:
        return 'available'
    
    status = str(status_str).lower().strip()
    
    if any(keyword in status for keyword in ['l·ªói', 'b·∫©n', 'm·ªëc', 'h·ªèng']):
        return 'damaged'
    elif any(keyword in status for keyword in ['h·∫øt', 'kh√¥ng c√≥']):
        return 'out_of_stock'
    elif any(keyword in status for keyword in ['√≠t', 's·∫Øp h·∫øt']):
        return 'low_stock'
    else:
        return 'available'

def read_real_data_from_excel():
    """ƒê·ªçc d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx"""
    try:
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return []
            
        print("üìñ ƒêang ƒë·ªçc d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx...")
        
        workbook = openpyxl.load_workbook(excel_path)
        
        # ∆Øu ti√™n sheet "GV"
        sheet_name = "GV" if "GV" in workbook.sheetnames else workbook.sheetnames[0]
        sheet = workbook[sheet_name]
        print(f"üìä ƒê·ªçc sheet: {sheet_name}")
        
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ d√≤ng 3
        fabrics = []
        valid_count = 0
        invalid_count = 0
        
        for row_num, row in enumerate(sheet.iter_rows(min_row=3, values_only=True), start=3):
            if not row or len(row) == 0:
                continue
                
            # L·∫•y m√£ h√†ng (c·ªôt B - index 1)
            code = row[1] if len(row) > 1 else None
            
            if not is_valid_fabric_code(code):
                invalid_count += 1
                continue
            
            # T·∫°o fabric object
            fabric = {
                'code': str(code).strip(),
                'name': str(row[2]).strip() if len(row) > 2 and row[2] else f"V·∫£i {code}",
                'unit': str(row[3]).strip() if len(row) > 3 and row[3] else 'm',
                'quantity': normalize_quantity(row[4] if len(row) > 4 else 0),
                'location': str(row[5]).strip() if len(row) > 5 and row[5] else 'Unknown',
                'type': str(row[6]).strip() if len(row) > 6 and row[6] else 'fabric',
                'status': normalize_status(row[7] if len(row) > 7 else ''),
                'note': str(row[10]).strip() if len(row) > 10 and row[10] else '',
            }
            
            fabrics.append(fabric)
            valid_count += 1
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {valid_count} s·∫£n ph·∫©m th·∫≠t, b·ªè qua {invalid_count} d√≤ng kh√¥ng h·ª£p l·ªá")
        return fabrics
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file Excel: {e}")
        return []

def supabase_request(method, endpoint, data=None):
    """Th·ª±c hi·ªán request ƒë·∫øn Supabase API"""
    url = f"{SUPABASE_URL}/rest/v1/{endpoint}"
    
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
    }
    
    try:
        if data:
            data_bytes = json.dumps(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_bytes, headers=headers, method=method)
        else:
            req = urllib.request.Request(url, headers=headers, method=method)
        
        with urllib.request.urlopen(req) as response:
            return response.getcode(), response.read().decode('utf-8')
            
    except urllib.error.HTTPError as e:
        return e.code, e.read().decode('utf-8')
    except Exception as e:
        return 0, str(e)

def prepare_fabric_for_insert(fabric):
    """Chu·∫©n b·ªã fabric object cho insert"""
    return {
        'code': fabric['code'],
        'name': fabric['name'],
        'type': fabric['type'],
        'quantity': fabric['quantity'],
        'unit': fabric['unit'],
        'location': fabric['location'],
        'status': fabric['status'],
        'image': '',  # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
        'price': None,
        'price_note': fabric.get('note', ''),  # S·ª≠ d·ª•ng price_note cho ghi ch√∫
        'is_hidden': False,  # Hi·ªÉn th·ªã v√¨ ƒë√¢y l√† d·ªØ li·ªáu th·∫≠t
        'created_at': datetime.now().isoformat(),
        'updated_at': datetime.now().isoformat()
    }

def import_real_fabrics(fabrics):
    """Import d·ªØ li·ªáu th·∫≠t v√†o Supabase"""
    print(f"üì§ ƒêang import {len(fabrics)} s·∫£n ph·∫©m th·∫≠t...")
    
    # Insert theo batch
    batch_size = 20
    total_inserted = 0
    
    for i in range(0, len(fabrics), batch_size):
        batch = fabrics[i:i + batch_size]
        prepared_batch = [prepare_fabric_for_insert(f) for f in batch]
        
        print(f"   üì¶ Batch {i//batch_size + 1}: ƒêang insert {len(batch)} s·∫£n ph·∫©m...")
        
        status_code, response = supabase_request('POST', 'fabrics', prepared_batch)
        
        if status_code in [200, 201]:
            total_inserted += len(batch)
            print(f"   ‚úÖ Batch {i//batch_size + 1}: Th√†nh c√¥ng ({total_inserted}/{len(fabrics)})")
        else:
            print(f"   ‚ùå Batch {i//batch_size + 1} failed: {status_code} - {response}")
            
            # Th·ª≠ insert t·ª´ng item ri√™ng l·∫ª
            print(f"   üîÑ Th·ª≠ insert t·ª´ng item...")
            for j, fabric in enumerate(batch):
                try:
                    prepared_item = prepare_fabric_for_insert(fabric)
                    status_code_single, response_single = supabase_request('POST', 'fabrics', [prepared_item])
                    if status_code_single in [200, 201]:
                        total_inserted += 1
                        print(f"      ‚úÖ Item {j+1}: {fabric['code']}")
                    else:
                        print(f"      ‚ùå Item {j+1}: {fabric['code']} - {status_code_single}")
                except Exception as e:
                    print(f"      ‚ùå Item {j+1}: {fabric['code']} - Exception: {e}")
    
    print(f"\nüìä K·∫øt qu·∫£ import:")
    print(f"   ‚úÖ Th√†nh c√¥ng: {total_inserted}/{len(fabrics)} s·∫£n ph·∫©m")
    
    return total_inserted

def verify_import():
    """Ki·ªÉm tra k·∫øt qu·∫£ import"""
    print("üîç Ki·ªÉm tra k·∫øt qu·∫£ import...")
    
    status_code, response = supabase_request('GET', 'fabrics?select=code,name,quantity,location&limit=5')
    
    if status_code == 200:
        try:
            sample_data = json.loads(response)
            print("üìã Sample data:")
            for item in sample_data:
                print(f"   ‚Ä¢ {item['code']} - {item['name']} ({item['quantity']} t·∫°i {item['location']})")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói parse response: {e}")
            return False
    else:
        print(f"‚ùå L·ªói ki·ªÉm tra: {status_code} - {response}")
        return False

def create_summary_report(fabrics, inserted_count):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    
    total_quantity = sum(f['quantity'] for f in fabrics)
    locations = set(f['location'] for f in fabrics)
    types = set(f['type'] for f in fabrics if f['type'])
    
    report_content = f"""# üìä B√ÅO C√ÅO IMPORT D·ªÆ LI·ªÜU TH·∫¨T

## üìà T·ªïng quan:
- **File ngu·ªìn:** giavonmoi.xlsx (Sheet: GV)
- **D·ªØ li·ªáu ƒë√£ import:** {inserted_count}/{len(fabrics)} s·∫£n ph·∫©m
- **T·ª∑ l·ªá th√†nh c√¥ng:** {(inserted_count/len(fabrics)*100):.1f}%
- **T·ªïng s·ªë l∆∞·ª£ng:** {total_quantity:.1f} ƒë∆°n v·ªã
- **S·ªë v·ªã tr√≠:** {len(locations)} v·ªã tr√≠ kh√°c nhau
- **S·ªë lo·∫°i v·∫£i:** {len(types)} lo·∫°i kh√°c nhau

## ‚úÖ ƒê·∫∑c ƒëi·ªÉm d·ªØ li·ªáu:
- **100% d·ªØ li·ªáu th·∫≠t** t·ª´ file giavonmoi.xlsx
- **Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£o/mock** n√†o ƒë∆∞·ª£c import
- **T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu hi·ªÉn th·ªã** (is_hidden = false)
- **D·ªØ li·ªáu ch√≠nh x√°c v√† ƒë√°ng tin c·∫≠y**

## üè∑Ô∏è Top 10 s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng:
"""
    
    # Sort by quantity v√† l·∫•y top 10
    top_products = sorted(fabrics, key=lambda x: x['quantity'], reverse=True)[:10]
    for i, product in enumerate(top_products, 1):
        report_content += f"{i}. **{product['code']}** - {product['name']} ({product['quantity']} {product['unit']})\n"
    
    report_content += f"""
## üìç Top 10 v·ªã tr√≠ c√≥ nhi·ªÅu s·∫£n ph·∫©m:
"""
    
    # Th·ªëng k√™ theo v·ªã tr√≠
    location_stats = {}
    for fabric in fabrics:
        loc = fabric['location']
        location_stats[loc] = location_stats.get(loc, 0) + 1
    
    top_locations = sorted(location_stats.items(), key=lambda x: x[1], reverse=True)[:10]
    for i, (location, count) in enumerate(top_locations, 1):
        report_content += f"{i}. **{location}:** {count} s·∫£n ph·∫©m\n"
    
    report_content += f"""
## üéØ K·∫øt qu·∫£:
- ‚úÖ Web app s·∫Ω hi·ªÉn th·ªã {inserted_count} s·∫£n ph·∫©m th·∫≠t
- ‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£o n√†o ƒë∆∞·ª£c hi·ªÉn th·ªã
- ‚úÖ T·∫•t c·∫£ th√¥ng tin ƒë·ªÅu ch√≠nh x√°c t·ª´ Excel
- ‚úÖ H·ªá th·ªëng ho√†n to√†n ƒë√°ng tin c·∫≠y

## üí° B∆∞·ªõc ti·∫øp theo:
1. Restart web app ƒë·ªÉ load d·ªØ li·ªáu m·ªõi
2. Ki·ªÉm tra hi·ªÉn th·ªã tr√™n giao di·ªán
3. Test c√°c ch·ª©c nƒÉng search, filter
4. C·∫≠p nh·∫≠t ·∫£nh cho c√°c s·∫£n ph·∫©m (n·∫øu c·∫ßn)

---
T·∫°o b·ªüi: import-only-real-data.py
Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
    
    # L∆∞u b√°o c√°o
    with open('BAO_CAO_IMPORT_DU_LIEU_THAT_ONLY.md', 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üíæ ƒê√£ t·∫°o b√°o c√°o: BAO_CAO_IMPORT_DU_LIEU_THAT_ONLY.md")

def main():
    print("üöÄ B·∫ÆT ƒê·∫¶U IMPORT CH·ªà D·ªÆ LI·ªÜU TH·∫¨T")
    print("="*50)
    
    # 1. ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
    fabrics = read_real_data_from_excel()
    if not fabrics:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ import")
        return
    
    print(f"\nüìä S·∫Ω import {len(fabrics)} s·∫£n ph·∫©m th·∫≠t (100% t·ª´ giavonmoi.xlsx)")
    
    # X√°c nh·∫≠n t·ª´ user
    confirm = input("\n‚úÖ B·∫°n c√≥ mu·ªën import ch·ªâ d·ªØ li·ªáu th·∫≠t v√†o Supabase? (y/N): ")
    
    if confirm.lower() != 'y':
        print("‚ùå ƒê√£ h·ªßy import")
        return
    
    # 2. Import d·ªØ li·ªáu
    inserted_count = import_real_fabrics(fabrics)
    
    # 3. Ki·ªÉm tra k·∫øt qu·∫£
    if verify_import():
        print(f"\nüéâ IMPORT TH√ÄNH C√îNG!")
        print(f"   ‚úÖ ƒê√£ import {inserted_count} s·∫£n ph·∫©m th·∫≠t")
        print(f"   ‚úÖ 100% d·ªØ li·ªáu t·ª´ giavonmoi.xlsx")
        print(f"   ‚úÖ Kh√¥ng c√≥ d·ªØ li·ªáu ·∫£o n√†o")
        
        # 4. T·∫°o b√°o c√°o
        create_summary_report(fabrics, inserted_count)
        
        print("\nüí° B∆∞·ªõc ti·∫øp theo: Restart web app ƒë·ªÉ load d·ªØ li·ªáu th·∫≠t!")
        
    else:
        print("‚ùå Import kh√¥ng th√†nh c√¥ng ho√†n to√†n")

if __name__ == "__main__":
    main()
