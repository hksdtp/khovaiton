#!/usr/bin/env python3
"""
Script ƒë·ªÉ so s√°nh d·ªØ li·ªáu d·ª± √°n v·ªõi file giavonmoi.xlsx
Ki·ªÉm tra s·ª± kh√°c bi·ªát gi·ªØa d·ªØ li·ªáu th·ª±c t·∫ø v√† d·ªØ li·ªáu trong h·ªá th·ªëng
"""

import pandas as pd
import json
import csv
import os
from pathlib import Path

def read_giavonmoi_excel():
    """ƒê·ªçc d·ªØ li·ªáu t·ª´ file giavonmoi.xlsx"""
    try:
        # ƒê·ªçc file Excel
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return None
            
        print("üìñ ƒêang ƒë·ªçc file giavonmoi.xlsx...")
        
        # Th·ª≠ ƒë·ªçc v·ªõi c√°c sheet kh√°c nhau
        xl_file = pd.ExcelFile(excel_path)
        print(f"üìã Sheets c√≥ s·∫µn: {xl_file.sheet_names}")
        
        # ƒê·ªçc sheet ƒë·∫ßu ti√™n ho·∫∑c sheet c√≥ t√™n ph√π h·ª£p
        sheet_name = xl_file.sheet_names[0]
        for name in xl_file.sheet_names:
            if any(keyword in name.lower() for keyword in ['gia', 'von', 'data', 'sheet1']):
                sheet_name = name
                break
                
        print(f"üìä ƒê·ªçc sheet: {sheet_name}")
        df = pd.read_excel(excel_path, sheet_name=sheet_name)
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {len(df)} d√≤ng d·ªØ li·ªáu t·ª´ {sheet_name}")
        print(f"üìã Columns: {list(df.columns)}")
        
        return df
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file Excel: {e}")
        return None

def read_current_project_data():
    """ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i t·ª´ d·ª± √°n"""
    current_data = {}
    
    # 1. ƒê·ªçc fabric_inventory_updated.csv
    csv_path = Path("public/fabric_inventory_updated.csv")
    if csv_path.exists():
        try:
            df_csv = pd.read_csv(csv_path)
            current_data['fabric_csv'] = df_csv
            print(f"‚úÖ ƒê·ªçc {len(df_csv)} d√≤ng t·ª´ fabric_inventory_updated.csv")
            print(f"üìã CSV Columns: {list(df_csv.columns)}")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc CSV: {e}")
    
    # 2. ƒê·ªçc image mapping
    mapping_path = Path("public/image_mapping.json")
    if mapping_path.exists():
        try:
            with open(mapping_path, 'r', encoding='utf-8') as f:
                image_mapping = json.load(f)
            current_data['image_mapping'] = image_mapping
            print(f"‚úÖ ƒê·ªçc {len(image_mapping)} mappings t·ª´ image_mapping.json")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc image mapping: {e}")
    
    # 3. ƒê·ªçc fabrics_data.json n·∫øu c√≥
    fabrics_path = Path("public/fabrics_data.json")
    if fabrics_path.exists():
        try:
            with open(fabrics_path, 'r', encoding='utf-8') as f:
                fabrics_data = json.load(f)
            current_data['fabrics_json'] = fabrics_data
            print(f"‚úÖ ƒê·ªçc fabrics_data.json")
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc fabrics_data.json: {e}")
    
    return current_data

def normalize_fabric_code(code):
    """Chu·∫©n h√≥a m√£ v·∫£i ƒë·ªÉ so s√°nh"""
    if pd.isna(code):
        return ""
    return str(code).strip().upper()

def compare_data(excel_df, current_data):
    """So s√°nh d·ªØ li·ªáu Excel v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i"""
    print("\n" + "="*60)
    print("üîç B·∫ÆT ƒê·∫¶U SO S√ÅNH D·ªÆ LI·ªÜU")
    print("="*60)
    
    comparison_results = {
        'excel_total': len(excel_df),
        'missing_in_project': [],
        'extra_in_project': [],
        'data_differences': [],
        'price_differences': [],
        'quantity_differences': []
    }
    
    # Chu·∫©n h√≥a d·ªØ li·ªáu Excel
    excel_codes = set()
    excel_data = {}
    
    # T√¨m c·ªôt m√£ v·∫£i trong Excel
    code_column = None
    for col in excel_df.columns:
        if any(keyword in str(col).lower() for keyword in ['ma', 'code', 'm√£']):
            code_column = col
            break
    
    if code_column is None:
        print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt m√£ v·∫£i trong Excel")
        return comparison_results
    
    print(f"üìã S·ª≠ d·ª•ng c·ªôt m√£ v·∫£i: {code_column}")
    
    # X·ª≠ l√Ω d·ªØ li·ªáu Excel
    for idx, row in excel_df.iterrows():
        code = normalize_fabric_code(row[code_column])
        if code:
            excel_codes.add(code)
            excel_data[code] = row.to_dict()
    
    print(f"üìä Excel c√≥ {len(excel_codes)} m√£ v·∫£i duy nh·∫•t")
    
    # So s√°nh v·ªõi CSV hi·ªán t·∫°i
    if 'fabric_csv' in current_data:
        csv_df = current_data['fabric_csv']
        
        # T√¨m c·ªôt m√£ v·∫£i trong CSV
        csv_code_column = None
        for col in csv_df.columns:
            if any(keyword in str(col).lower() for keyword in ['ma_hang', 'ma', 'code']):
                csv_code_column = col
                break
        
        if csv_code_column:
            print(f"üìã CSV s·ª≠ d·ª•ng c·ªôt m√£ v·∫£i: {csv_code_column}")
            
            csv_codes = set()
            csv_data = {}
            
            for idx, row in csv_df.iterrows():
                code = normalize_fabric_code(row[csv_code_column])
                if code:
                    csv_codes.add(code)
                    csv_data[code] = row.to_dict()
            
            print(f"üìä CSV c√≥ {len(csv_codes)} m√£ v·∫£i duy nh·∫•t")
            
            # T√¨m s·ª± kh√°c bi·ªát
            missing_in_project = excel_codes - csv_codes
            extra_in_project = csv_codes - excel_codes
            common_codes = excel_codes & csv_codes
            
            comparison_results['missing_in_project'] = list(missing_in_project)
            comparison_results['extra_in_project'] = list(extra_in_project)
            comparison_results['csv_total'] = len(csv_codes)
            comparison_results['common_codes'] = len(common_codes)
            
            print(f"\nüìà K·∫æT QU·∫¢ SO S√ÅNH:")
            print(f"   üìä Excel: {len(excel_codes)} m√£ v·∫£i")
            print(f"   üìä CSV:   {len(csv_codes)} m√£ v·∫£i")
            print(f"   ‚úÖ Chung: {len(common_codes)} m√£ v·∫£i")
            print(f"   ‚ùå Thi·∫øu trong d·ª± √°n: {len(missing_in_project)} m√£ v·∫£i")
            print(f"   ‚ûï Th·ª´a trong d·ª± √°n: {len(extra_in_project)} m√£ v·∫£i")
            
            # So s√°nh chi ti·∫øt cho c√°c m√£ chung
            print(f"\nüîç Ki·ªÉm tra chi ti·∫øt {min(10, len(common_codes))} m√£ v·∫£i chung...")
            for i, code in enumerate(list(common_codes)[:10]):
                excel_row = excel_data[code]
                csv_row = csv_data[code]
                
                differences = []
                
                # So s√°nh s·ªë l∆∞·ª£ng
                excel_qty = excel_row.get('So_luong', excel_row.get('Quantity', excel_row.get('SL', '')))
                csv_qty = csv_row.get('So_luong', csv_row.get('Quantity', ''))
                
                if str(excel_qty) != str(csv_qty):
                    differences.append(f"S·ªë l∆∞·ª£ng: Excel={excel_qty}, CSV={csv_qty}")
                
                # So s√°nh gi√° (n·∫øu c√≥)
                excel_price = excel_row.get('Gia', excel_row.get('Price', excel_row.get('Gia_von', '')))
                csv_price = csv_row.get('Gia', csv_row.get('Price', ''))
                
                if str(excel_price) != str(csv_price) and excel_price != '':
                    differences.append(f"Gi√°: Excel={excel_price}, CSV={csv_price}")
                
                if differences:
                    comparison_results['data_differences'].append({
                        'code': code,
                        'differences': differences
                    })
                    print(f"   ‚ö†Ô∏è  {code}: {'; '.join(differences)}")
    
    return comparison_results

def generate_report(comparison_results, excel_df):
    """T·∫°o b√°o c√°o chi ti·∫øt"""
    
    # T·∫°o file b√°o c√°o
    report_content = f"""
# üìä B√ÅO C√ÅO SO S√ÅNH D·ªÆ LI·ªÜU - GIAVONMOI.XLSX

## üìà T·ªïng quan:
- **Excel (giavonmoi.xlsx):** {comparison_results['excel_total']} d√≤ng
- **CSV hi·ªán t·∫°i:** {comparison_results.get('csv_total', 'N/A')} m√£ v·∫£i
- **M√£ v·∫£i chung:** {comparison_results.get('common_codes', 'N/A')}

## ‚ùå Thi·∫øu trong d·ª± √°n ({len(comparison_results['missing_in_project'])} m√£):
"""
    
    for code in comparison_results['missing_in_project'][:20]:  # Ch·ªâ hi·ªÉn th·ªã 20 ƒë·∫ßu
        report_content += f"- {code}\n"
    
    if len(comparison_results['missing_in_project']) > 20:
        report_content += f"- ... v√† {len(comparison_results['missing_in_project']) - 20} m√£ kh√°c\n"
    
    report_content += f"""
## ‚ûï Th·ª´a trong d·ª± √°n ({len(comparison_results['extra_in_project'])} m√£):
"""
    
    for code in comparison_results['extra_in_project'][:20]:  # Ch·ªâ hi·ªÉn th·ªã 20 ƒë·∫ßu
        report_content += f"- {code}\n"
    
    if len(comparison_results['extra_in_project']) > 20:
        report_content += f"- ... v√† {len(comparison_results['extra_in_project']) - 20} m√£ kh√°c\n"
    
    report_content += f"""
## ‚ö†Ô∏è S·ª± kh√°c bi·ªát d·ªØ li·ªáu ({len(comparison_results['data_differences'])} m√£):
"""
    
    for diff in comparison_results['data_differences'][:10]:
        report_content += f"- **{diff['code']}:** {'; '.join(diff['differences'])}\n"
    
    report_content += f"""
## üí° Khuy·∫øn ngh·ªã:
1. **C·∫≠p nh·∫≠t d·ªØ li·ªáu thi·∫øu:** Th√™m {len(comparison_results['missing_in_project'])} m√£ v·∫£i t·ª´ Excel v√†o d·ª± √°n
2. **Ki·ªÉm tra d·ªØ li·ªáu th·ª´a:** Xem x√©t {len(comparison_results['extra_in_project'])} m√£ v·∫£i ch·ªâ c√≥ trong d·ª± √°n
3. **ƒê·ªìng b·ªô d·ªØ li·ªáu:** C·∫≠p nh·∫≠t {len(comparison_results['data_differences'])} m√£ v·∫£i c√≥ s·ª± kh√°c bi·ªát

## üìÅ Files ƒë∆∞·ª£c t·∫°o:
- `BAO_CAO_SO_SANH_GIAVONMOI.md` - B√°o c√°o n√†y
- `ma_vai_thieu_trong_du_an.csv` - Danh s√°ch m√£ v·∫£i thi·∫øu
- `ma_vai_thua_trong_du_an.csv` - Danh s√°ch m√£ v·∫£i th·ª´a
- `du_lieu_khac_biet.csv` - Chi ti·∫øt s·ª± kh√°c bi·ªát

---
T·∫°o b·ªüi: compare-data-with-giavonmoi.py
Th·ªùi gian: {pd.Timestamp.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
    
    # L∆∞u b√°o c√°o
    with open('BAO_CAO_SO_SANH_GIAVONMOI.md', 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    # T·∫°o CSV cho m√£ v·∫£i thi·∫øu
    if comparison_results['missing_in_project']:
        missing_df = pd.DataFrame({
            'Ma_vai_thieu': comparison_results['missing_in_project'],
            'Ghi_chu': ['C√≥ trong Excel nh∆∞ng thi·∫øu trong d·ª± √°n'] * len(comparison_results['missing_in_project'])
        })
        missing_df.to_csv('ma_vai_thieu_trong_du_an.csv', index=False, encoding='utf-8')
        print(f"üíæ ƒê√£ t·∫°o file: ma_vai_thieu_trong_du_an.csv ({len(comparison_results['missing_in_project'])} m√£)")
    
    # T·∫°o CSV cho m√£ v·∫£i th·ª´a
    if comparison_results['extra_in_project']:
        extra_df = pd.DataFrame({
            'Ma_vai_thua': comparison_results['extra_in_project'],
            'Ghi_chu': ['C√≥ trong d·ª± √°n nh∆∞ng kh√¥ng c√≥ trong Excel'] * len(comparison_results['extra_in_project'])
        })
        extra_df.to_csv('ma_vai_thua_trong_du_an.csv', index=False, encoding='utf-8')
        print(f"üíæ ƒê√£ t·∫°o file: ma_vai_thua_trong_du_an.csv ({len(comparison_results['extra_in_project'])} m√£)")
    
    print(f"üíæ ƒê√£ t·∫°o b√°o c√°o: BAO_CAO_SO_SANH_GIAVONMOI.md")

def main():
    print("üîç B·∫ÆT ƒê·∫¶U SO S√ÅNH D·ªÆ LI·ªÜU V·ªöI GIAVONMOI.XLSX")
    print("="*60)
    
    # ƒê·ªçc d·ªØ li·ªáu Excel
    excel_df = read_giavonmoi_excel()
    if excel_df is None:
        return
    
    # ƒê·ªçc d·ªØ li·ªáu d·ª± √°n hi·ªán t·∫°i
    print("\nüìñ ƒêang ƒë·ªçc d·ªØ li·ªáu d·ª± √°n hi·ªán t·∫°i...")
    current_data = read_current_project_data()
    
    # So s√°nh d·ªØ li·ªáu
    comparison_results = compare_data(excel_df, current_data)
    
    # T·∫°o b√°o c√°o
    print("\nüìù T·∫°o b√°o c√°o...")
    generate_report(comparison_results, excel_df)
    
    print("\nüéâ HO√ÄN T·∫§T!")
    print("üìÅ Ki·ªÉm tra c√°c file b√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o")

if __name__ == "__main__":
    main()
