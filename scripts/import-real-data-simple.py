#!/usr/bin/env python3
"""
Script ƒë∆°n gi·∫£n ƒë·ªÉ t·∫°o SQL t·ª´ giavonmoi.xlsx
"""

import openpyxl
import json
import re
from pathlib import Path
from datetime import datetime

def is_valid_fabric_code(code):
    """Ki·ªÉm tra xem c√≥ ph·∫£i m√£ v·∫£i h·ª£p l·ªá kh√¥ng"""
    if not code or not isinstance(code, str):
        return False
    
    code = str(code).strip()
    
    # Lo·∫°i b·ªè c√°c d√≤ng ghi ch√∫
    invalid_patterns = [
        r'^[0-9]+\.',  # B·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† d·∫•u ch·∫•m
        r'l∆∞u √Ω',
        r'v·∫£i ƒë∆∞·ª£c ki·ªÉm tra',
        r's·ªë l∆∞·ª£ng v·∫£i',
        r'ch∆∞a ki·ªÉm tra',
        r'ph∆∞∆°ng ph√°p',
        r'ki·ªÉm k√™',
        r'ch·∫•t l∆∞·ª£ng',
        r'ngo·∫°i quan'
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, code.lower()):
            return False
    
    if len(code) < 2 or len(code) > 100:
        return False
    
    if not re.search(r'[a-zA-Z0-9]', code):
        return False
    
    return True

def normalize_quantity(qty_str):
    """Chu·∫©n h√≥a s·ªë l∆∞·ª£ng"""
    if not qty_str:
        return 0
    
    try:
        qty_str = str(qty_str).strip()
        return float(qty_str)
    except:
        return 0

def normalize_status(status_str):
    """Chu·∫©n h√≥a tr·∫°ng th√°i"""
    if not status_str:
        return 'available'
    
    status = str(status_str).lower().strip()
    
    if any(keyword in status for keyword in ['l·ªói', 'b·∫©n', 'm·ªëc', 'h·ªèng']):
        return 'damaged'
    elif any(keyword in status for keyword in ['h·∫øt', 'kh√¥ng c√≥']):
        return 'out_of_stock'
    elif any(keyword in status for keyword in ['√≠t', 's·∫Øp h·∫øt']):
        return 'low_stock'
    else:
        return 'available'

def escape_sql_string(s):
    """Escape string cho SQL"""
    if not s:
        return "''"
    return "'" + str(s).replace("'", "''") + "'"

def read_real_data_from_excel():
    """ƒê·ªçc d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx"""
    try:
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return []
            
        print("üìñ ƒêang ƒë·ªçc d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx...")
        
        workbook = openpyxl.load_workbook(excel_path)
        
        # ∆Øu ti√™n sheet "GV"
        sheet_name = "GV" if "GV" in workbook.sheetnames else workbook.sheetnames[0]
        sheet = workbook[sheet_name]
        print(f"üìä ƒê·ªçc sheet: {sheet_name}")
        
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ d√≤ng 3
        fabrics = []
        valid_count = 0
        invalid_count = 0
        
        for row_num, row in enumerate(sheet.iter_rows(min_row=3, values_only=True), start=3):
            if not row or len(row) == 0:
                continue
                
            # L·∫•y m√£ h√†ng (c·ªôt B - index 1)
            code = row[1] if len(row) > 1 else None
            
            if not is_valid_fabric_code(code):
                invalid_count += 1
                continue
            
            # T·∫°o fabric object
            fabric = {
                'code': str(code).strip(),
                'name': str(row[2]).strip() if len(row) > 2 and row[2] else f"V·∫£i {code}",
                'unit': str(row[3]).strip() if len(row) > 3 and row[3] else 'm',
                'quantity': normalize_quantity(row[4] if len(row) > 4 else 0),
                'location': str(row[5]).strip() if len(row) > 5 and row[5] else 'Unknown',
                'type': str(row[6]).strip() if len(row) > 6 and row[6] else 'fabric',
                'status': normalize_status(row[7] if len(row) > 7 else ''),
                'note': str(row[10]).strip() if len(row) > 10 and row[10] else '',
            }
            
            fabrics.append(fabric)
            valid_count += 1
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {valid_count} s·∫£n ph·∫©m h·ª£p l·ªá, b·ªè qua {invalid_count} d√≤ng kh√¥ng h·ª£p l·ªá")
        return fabrics
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file Excel: {e}")
        return []

def generate_sql_script(fabrics):
    """T·∫°o SQL script ƒë·ªÉ import v√†o Supabase"""
    
    sql_content = f"""-- SQL Script ƒë·ªÉ import d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx
-- T·∫°o b·ªüi: import-real-data-simple.py
-- Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
-- T·ªïng s·ªë records: {len(fabrics)}

-- X√≥a t·∫•t c·∫£ d·ªØ li·ªáu c≈©
DELETE FROM fabrics;

-- Reset sequence (n·∫øu c·∫ßn)
ALTER SEQUENCE fabrics_id_seq RESTART WITH 1;

-- Insert d·ªØ li·ªáu th·∫≠t
"""
    
    # T·∫°o INSERT statements
    for i, fabric in enumerate(fabrics):
        sql_content += f"""
INSERT INTO fabrics (
    code, name, type, quantity, unit, location, status, 
    image, price, price_note, is_hidden, note,
    created_at, updated_at
) VALUES (
    {escape_sql_string(fabric['code'])},
    {escape_sql_string(fabric['name'])},
    {escape_sql_string(fabric['type'])},
    {fabric['quantity']},
    {escape_sql_string(fabric['unit'])},
    {escape_sql_string(fabric['location'])},
    {escape_sql_string(fabric['status'])},
    '',  -- image s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
    NULL,  -- price
    NULL,  -- price_note
    false,  -- is_hidden
    {escape_sql_string(fabric['note'])},
    NOW(),
    NOW()
);"""
        
        # Th√™m comment m·ªói 50 records
        if (i + 1) % 50 == 0:
            sql_content += f"\n-- ƒê√£ insert {i + 1}/{len(fabrics)} records\n"
    
    sql_content += f"""

-- Ki·ªÉm tra k·∫øt qu·∫£
SELECT COUNT(*) as total_records FROM fabrics;
SELECT code, name, quantity, location FROM fabrics LIMIT 10;

-- Th·ªëng k√™ theo tr·∫°ng th√°i
SELECT status, COUNT(*) as count FROM fabrics GROUP BY status;

-- Th·ªëng k√™ theo v·ªã tr√≠
SELECT location, COUNT(*) as count FROM fabrics GROUP BY location ORDER BY count DESC LIMIT 10;

-- Ho√†n t·∫•t import {len(fabrics)} s·∫£n ph·∫©m th·∫≠t t·ª´ giavonmoi.xlsx
"""
    
    return sql_content

def generate_json_backup(fabrics):
    """T·∫°o file JSON backup"""
    backup_data = {
        'metadata': {
            'source': 'giavonmoi.xlsx',
            'sheet': 'GV',
            'total_records': len(fabrics),
            'created_at': datetime.now().isoformat(),
            'description': 'D·ªØ li·ªáu th·∫≠t t·ª´ file Excel giavonmoi.xlsx'
        },
        'fabrics': fabrics
    }
    
    return json.dumps(backup_data, ensure_ascii=False, indent=2)

def create_summary_report(fabrics):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    
    # Th·ªëng k√™
    total_quantity = sum(f['quantity'] for f in fabrics)
    locations = set(f['location'] for f in fabrics)
    types = set(f['type'] for f in fabrics if f['type'])
    status_stats = {}
    for fabric in fabrics:
        status = fabric['status']
        status_stats[status] = status_stats.get(status, 0) + 1
    
    report_content = f"""# üìä B√ÅO C√ÅO CHU·∫®N B·ªä IMPORT D·ªÆ LI·ªÜU TH·∫¨T

## üìà T·ªïng quan:
- **File ngu·ªìn:** giavonmoi.xlsx (Sheet: GV)
- **D·ªØ li·ªáu ƒë√£ chu·∫©n b·ªã:** {len(fabrics)} s·∫£n ph·∫©m
- **T·ªïng s·ªë l∆∞·ª£ng:** {total_quantity:.1f} ƒë∆°n v·ªã
- **S·ªë v·ªã tr√≠:** {len(locations)} v·ªã tr√≠ kh√°c nhau
- **S·ªë lo·∫°i v·∫£i:** {len(types)} lo·∫°i kh√°c nhau

## üìä Th·ªëng k√™ tr·∫°ng th√°i:
"""
    
    for status, count in status_stats.items():
        status_name = {
            'available': 'C√≥ s·∫µn',
            'damaged': 'H·ªèng/L·ªói', 
            'low_stock': 'S·∫Øp h·∫øt',
            'out_of_stock': 'H·∫øt h√†ng'
        }.get(status, status)
        percentage = (count / len(fabrics) * 100)
        report_content += f"- **{status_name}:** {count} s·∫£n ph·∫©m ({percentage:.1f}%)\n"
    
    # Top 10 s·∫£n ph·∫©m
    top_products = sorted(fabrics, key=lambda x: x['quantity'], reverse=True)[:10]
    report_content += f"""
## üè∑Ô∏è Top 10 s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng:
"""
    for i, product in enumerate(top_products, 1):
        report_content += f"{i}. **{product['code']}** - {product['name']} ({product['quantity']} {product['unit']})\n"
    
    # Top v·ªã tr√≠
    location_stats = {}
    for fabric in fabrics:
        loc = fabric['location']
        location_stats[loc] = location_stats.get(loc, 0) + 1
    
    top_locations = sorted(location_stats.items(), key=lambda x: x[1], reverse=True)[:10]
    report_content += f"""
## üìç Top 10 v·ªã tr√≠ c√≥ nhi·ªÅu s·∫£n ph·∫©m:
"""
    for i, (location, count) in enumerate(top_locations, 1):
        report_content += f"{i}. **{location}:** {count} s·∫£n ph·∫©m\n"
    
    report_content += f"""
## üìÅ Files ƒë∆∞·ª£c t·∫°o:
- `import-real-data.sql` - SQL script ƒë·ªÉ ch·∫°y trong Supabase
- `real-data-backup.json` - File backup d·ªØ li·ªáu JSON
- `BAO_CAO_CHUAN_BI_IMPORT.md` - B√°o c√°o n√†y

## üöÄ C√°ch s·ª≠ d·ª•ng:
1. **M·ªü Supabase SQL Editor**
2. **Copy n·ªôi dung file `import-real-data.sql`**
3. **Paste v√† ch·∫°y script**
4. **Ki·ªÉm tra k·∫øt qu·∫£**
5. **Restart web app**

## ‚ö†Ô∏è L∆∞u √Ω:
- Script s·∫Ω X√ìA T·∫§T C·∫¢ d·ªØ li·ªáu c≈©
- Backup ƒë∆∞·ª£c l∆∞u trong file JSON
- Sau khi import, restart web app ƒë·ªÉ load d·ªØ li·ªáu m·ªõi

---
T·∫°o b·ªüi: import-real-data-simple.py
Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
    
    return report_content

def main():
    print("üöÄ CHU·∫®N B·ªä IMPORT D·ªÆ LI·ªÜU TH·∫¨T T·ª™ GIAVONMOI.XLSX")
    print("="*60)
    
    # 1. ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
    fabrics = read_real_data_from_excel()
    if not fabrics:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x·ª≠ l√Ω")
        return
    
    print(f"\nüìä ƒê√£ chu·∫©n b·ªã {len(fabrics)} s·∫£n ph·∫©m th·∫≠t")
    
    # 2. T·∫°o SQL script
    print("üìù T·∫°o SQL script...")
    sql_content = generate_sql_script(fabrics)
    with open('import-real-data.sql', 'w', encoding='utf-8') as f:
        f.write(sql_content)
    print("‚úÖ ƒê√£ t·∫°o file: import-real-data.sql")
    
    # 3. T·∫°o JSON backup
    print("üíæ T·∫°o JSON backup...")
    json_content = generate_json_backup(fabrics)
    with open('real-data-backup.json', 'w', encoding='utf-8') as f:
        f.write(json_content)
    print("‚úÖ ƒê√£ t·∫°o file: real-data-backup.json")
    
    # 4. T·∫°o b√°o c√°o
    print("üìã T·∫°o b√°o c√°o...")
    report_content = create_summary_report(fabrics)
    with open('BAO_CAO_CHUAN_BI_IMPORT.md', 'w', encoding='utf-8') as f:
        f.write(report_content)
    print("‚úÖ ƒê√£ t·∫°o file: BAO_CAO_CHUAN_BI_IMPORT.md")
    
    print("\nüéâ HO√ÄN T·∫§T CHU·∫®N B·ªä!")
    print("üìÅ Files ƒë√£ t·∫°o:")
    print("   ‚Ä¢ import-real-data.sql - SQL script ƒë·ªÉ import")
    print("   ‚Ä¢ real-data-backup.json - Backup d·ªØ li·ªáu")
    print("   ‚Ä¢ BAO_CAO_CHUAN_BI_IMPORT.md - B√°o c√°o chi ti·∫øt")
    
    print("\nüöÄ B∆∞·ªõc ti·∫øp theo:")
    print("1. M·ªü Supabase SQL Editor")
    print("2. Copy n·ªôi dung file import-real-data.sql")
    print("3. Paste v√† ch·∫°y script")
    print("4. Restart web app")

if __name__ == "__main__":
    main()
