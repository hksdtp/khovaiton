#!/usr/bin/env python3
"""
Verification script ƒë·ªÉ ki·ªÉm tra t√≠nh ch√≠nh x√°c tuy·ªát ƒë·ªëi c·ªßa mapping
Ninh ∆°i, script n√†y s·∫Ω:
1. Ki·ªÉm tra t·ª´ng mapping c√≥ ch√≠nh x√°c kh√¥ng
2. Highlight c√°c cases c√≥ th·ªÉ sai
3. T·∫°o danh s√°ch c·∫ßn review th·ªß c√¥ng
4. Rollback n·∫øu c·∫ßn thi·∫øt
"""

import os
import json
from pathlib import Path
import shutil
from datetime import datetime

# Paths
WEB_APP_IMAGES = "/Users/nih/web app/khovaiton/public/images/fabrics"
VTT9_FOLDER = "/Users/nih/Downloads/vtt9"

def load_phase1_results():
    """Load k·∫øt qu·∫£ Phase 1"""
    try:
        with open('phase1_results.json', 'r') as f:
            return json.load(f)
    except:
        print("‚ùå Kh√¥ng t√¨m th·∫•y phase1_results.json")
        return None

def get_recent_images():
    """L·∫•y danh s√°ch ·∫£nh ƒë∆∞·ª£c th√™m g·∫ßn ƒë√¢y"""
    if not os.path.exists(WEB_APP_IMAGES):
        return []
    
    recent_images = []
    current_time = datetime.now()
    
    for filename in os.listdir(WEB_APP_IMAGES):
        if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.webp')):
            filepath = os.path.join(WEB_APP_IMAGES, filename)
            
            # Check modification time (within last hour)
            mod_time = datetime.fromtimestamp(os.path.getmtime(filepath))
            time_diff = (current_time - mod_time).total_seconds()
            
            if time_diff < 3600:  # Within 1 hour
                recent_images.append({
                    'filename': filename,
                    'fabric_code': Path(filename).stem,
                    'mod_time': mod_time,
                    'filepath': filepath
                })
    
    return sorted(recent_images, key=lambda x: x['mod_time'], reverse=True)

def manual_verification_cases():
    """Danh s√°ch cases c·∫ßn verify th·ªß c√¥ng"""
    return {
        # Cases c√≥ th·ªÉ mapping sai - c·∫ßn ki·ªÉm tra visual
        'suspicious_mappings': [
            'DCR-71022-8',  # Mapped t·ª´ "71022-8.jpg" - c√≥ th·ªÉ ƒë√∫ng nh∆∞ng c·∫ßn confirm
            '71022-2',      # Mapped t·ª´ "71022-8.jpg" - c√≥ v·∫ª sai s·ªë
            'EB5448 ALA PASTER',  # T√™n kh√°c bi·ªát nhi·ªÅu
            'VN 10808',     # Pattern kh√°c bi·ªát
            'ET66470183',   # S·ªë d√†i, c·∫ßn verify
            'HENILY R/B RUN BN',  # T√™n ph·ª©c t·∫°p
            '91200201S0103',  # S·ªë d√†i, pattern kh√°c
        ],
        
        # Manual mappings c·∫ßn double-check
        'manual_mappings_to_verify': [
            'carnival  r/b purple',  # C√≥ space th·ª´a
            'HBM BLACKOUT HUESO',    # Mapped t·ª´ "TWILIGHT 24 ROEBUCK"
            'Voile R/B Cream',       # C√≥ d·∫•u "/"
            'CARNIVAL R/B MULBERRY 210',  # Mapped t·ª´ "CAMVAL RBYY 210"
            'DCR-1000-2300-9124',    # Mapped t·ª´ "BRICK 3700-22793"
        ],
        
        # High similarity nh∆∞ng c·∫ßn confirm
        'high_similarity_verify': [
            'DCR-RP2010',    # 0.60 similarity - th·∫•p
            '83086-13',      # 0.60 similarity - th·∫•p  
            'BWB-8539',      # 0.60 similarity - th·∫•p
            'DCR-1000-2300-9163',  # 0.73 similarity - medium
        ]
    }

def verify_mapping_accuracy():
    """Ki·ªÉm tra accuracy c·ªßa mapping"""
    print("üîç VERIFICATION - KI·ªÇM TRA T√çNH CH√çNH X√ÅC MAPPING")
    print("=" * 60)
    
    recent_images = get_recent_images()
    verification_cases = manual_verification_cases()
    
    print(f"üìä Found {len(recent_images)} recent images to verify")
    
    # Categorize verification results
    results = {
        'definitely_correct': [],
        'probably_correct': [],
        'suspicious': [],
        'definitely_wrong': [],
        'need_manual_review': []
    }
    
    for image_data in recent_images:
        fabric_code = image_data['fabric_code']
        filename = image_data['filename']
        
        # Find original source file
        source_file = find_source_file(fabric_code)
        
        verification_result = {
            'fabric_code': fabric_code,
            'filename': filename,
            'source_file': source_file,
            'category': 'unknown',
            'confidence': 0,
            'reason': ''
        }
        
        # Check against verification cases
        if fabric_code in verification_cases['suspicious_mappings']:
            verification_result['category'] = 'suspicious'
            verification_result['confidence'] = 30
            verification_result['reason'] = 'In suspicious mappings list'
            results['suspicious'].append(verification_result)
            
        elif fabric_code in verification_cases['manual_mappings_to_verify']:
            verification_result['category'] = 'need_manual_review'
            verification_result['confidence'] = 50
            verification_result['reason'] = 'Manual mapping needs verification'
            results['need_manual_review'].append(verification_result)
            
        elif fabric_code in verification_cases['high_similarity_verify']:
            verification_result['category'] = 'suspicious'
            verification_result['confidence'] = 40
            verification_result['reason'] = 'Low similarity score'
            results['suspicious'].append(verification_result)
            
        else:
            # Check pattern similarity
            confidence = check_pattern_similarity(fabric_code, source_file)
            
            if confidence >= 90:
                verification_result['category'] = 'definitely_correct'
                verification_result['confidence'] = confidence
                verification_result['reason'] = 'High pattern similarity'
                results['definitely_correct'].append(verification_result)
                
            elif confidence >= 70:
                verification_result['category'] = 'probably_correct'
                verification_result['confidence'] = confidence
                verification_result['reason'] = 'Good pattern similarity'
                results['probably_correct'].append(verification_result)
                
            else:
                verification_result['category'] = 'suspicious'
                verification_result['confidence'] = confidence
                verification_result['reason'] = 'Low pattern similarity'
                results['suspicious'].append(verification_result)
    
    return results

def find_source_file(fabric_code):
    """T√¨m source file g·ªëc cho fabric code"""
    # This would need to be implemented to trace back to original VTT9 file
    # For now, return placeholder
    return f"Unknown source for {fabric_code}"

def check_pattern_similarity(fabric_code, source_file):
    """Check pattern similarity ƒë·ªÉ estimate confidence"""
    # Simple heuristic based on fabric code patterns
    
    # Exact numeric matches
    if fabric_code.replace('-', '').replace(' ', '').isdigit():
        return 95
    
    # Standard patterns
    if any(pattern in fabric_code.upper() for pattern in ['DCR-', 'TP01623-', 'BWB-', 'HA ', 'JBL']):
        return 85
    
    # R/B patterns
    if 'R/B' in fabric_code or 'RB' in fabric_code:
        return 75
    
    # Long complex names
    if len(fabric_code) > 20:
        return 60
    
    # Default
    return 70

def generate_verification_report(results):
    """T·∫°o b√°o c√°o verification chi ti·∫øt"""
    print(f"\nüìã VERIFICATION REPORT")
    print("=" * 50)
    
    total_images = sum(len(category) for category in results.values())
    
    print(f"üìä T·ªîNG QUAN ({total_images} ·∫£nh):")
    print(f"   ‚úÖ Definitely correct: {len(results['definitely_correct'])} ({len(results['definitely_correct'])/total_images*100:.1f}%)")
    print(f"   ‚úÖ Probably correct: {len(results['probably_correct'])} ({len(results['probably_correct'])/total_images*100:.1f}%)")
    print(f"   ‚ö†Ô∏è Suspicious: {len(results['suspicious'])} ({len(results['suspicious'])/total_images*100:.1f}%)")
    print(f"   ‚ùå Definitely wrong: {len(results['definitely_wrong'])} ({len(results['definitely_wrong'])/total_images*100:.1f}%)")
    print(f"   üîç Need manual review: {len(results['need_manual_review'])} ({len(results['need_manual_review'])/total_images*100:.1f}%)")
    
    # Show suspicious cases
    if results['suspicious']:
        print(f"\n‚ö†Ô∏è SUSPICIOUS MAPPINGS (c·∫ßn ki·ªÉm tra):")
        for item in results['suspicious']:
            print(f"   ‚Ä¢ {item['fabric_code']} | Confidence: {item['confidence']}% | {item['reason']}")
    
    # Show manual review cases
    if results['need_manual_review']:
        print(f"\nüîç NEED MANUAL REVIEW:")
        for item in results['need_manual_review']:
            print(f"   ‚Ä¢ {item['fabric_code']} | {item['reason']}")
    
    # Show definitely wrong cases
    if results['definitely_wrong']:
        print(f"\n‚ùå DEFINITELY WRONG (c·∫ßn rollback):")
        for item in results['definitely_wrong']:
            print(f"   ‚Ä¢ {item['fabric_code']} | {item['reason']}")
    
    return results

def create_rollback_plan(results):
    """T·∫°o k·∫ø ho·∫°ch rollback cho mappings sai"""
    rollback_candidates = []
    
    # Add definitely wrong
    rollback_candidates.extend(results['definitely_wrong'])
    
    # Add suspicious with very low confidence
    for item in results['suspicious']:
        if item['confidence'] < 50:
            rollback_candidates.append(item)
    
    if rollback_candidates:
        print(f"\nüîÑ ROLLBACK PLAN:")
        print(f"Recommend removing {len(rollback_candidates)} suspicious mappings:")
        
        for item in rollback_candidates:
            print(f"   ‚Ä¢ {item['fabric_code']} (confidence: {item['confidence']}%)")
        
        # Create rollback script
        rollback_script = "#!/bin/bash\n"
        rollback_script += "# Rollback suspicious mappings\n\n"
        
        for item in rollback_candidates:
            filepath = os.path.join(WEB_APP_IMAGES, item['filename'])
            rollback_script += f"rm -f '{filepath}'\n"
        
        with open('rollback_suspicious.sh', 'w') as f:
            f.write(rollback_script)
        
        print(f"üìù Rollback script saved: rollback_suspicious.sh")
        print(f"üí° Run: chmod +x rollback_suspicious.sh && ./rollback_suspicious.sh")
    
    return rollback_candidates

def main():
    """Main verification function"""
    print("üîç MAPPING ACCURACY VERIFICATION")
    print("=" * 60)
    print("üéØ M·ª•c ti√™u: ƒê·∫£m b·∫£o mapping ch√≠nh x√°c tuy·ªát ƒë·ªëi")
    print("‚ö†Ô∏è S·∫Ω highlight c√°c cases c√≥ th·ªÉ sai ƒë·ªÉ review")
    
    # Load Phase 1 results
    phase1_results = load_phase1_results()
    if phase1_results:
        print(f"üìä Phase 1 added: {phase1_results['success_count']} images")
    
    # Verify mapping accuracy
    results = verify_mapping_accuracy()
    
    # Generate report
    verification_report = generate_verification_report(results)
    
    # Create rollback plan if needed
    rollback_candidates = create_rollback_plan(results)
    
    # Save verification results
    with open('verification_results.json', 'w', encoding='utf-8') as f:
        json.dump(verification_report, f, ensure_ascii=False, indent=2, default=str)
    
    # Summary and recommendations
    total_suspicious = len(results['suspicious']) + len(results['definitely_wrong'])
    total_images = sum(len(category) for category in results.values())
    accuracy_rate = (total_images - total_suspicious) / total_images * 100 if total_images > 0 else 0
    
    print(f"\nüéØ FINAL ASSESSMENT:")
    print(f"   üìä Estimated accuracy: {accuracy_rate:.1f}%")
    print(f"   ‚ö†Ô∏è Cases need review: {total_suspicious}/{total_images}")
    print(f"   üîÑ Rollback candidates: {len(rollback_candidates)}")
    
    if accuracy_rate < 80:
        print(f"\n‚ùå RECOMMENDATION: ROLLBACK")
        print(f"   Accuracy qu√° th·∫•p ({accuracy_rate:.1f}%), n√™n rollback v√† review th·ªß c√¥ng")
    elif total_suspicious > 10:
        print(f"\n‚ö†Ô∏è RECOMMENDATION: PARTIAL ROLLBACK")
        print(f"   Rollback {len(rollback_candidates)} cases c√≥ confidence th·∫•p")
    else:
        print(f"\n‚úÖ RECOMMENDATION: KEEP WITH REVIEW")
        print(f"   Accuracy ch·∫•p nh·∫≠n ƒë∆∞·ª£c, ch·ªâ c·∫ßn review {total_suspicious} cases")
    
    print(f"\nüìÅ Files created:")
    print(f"   ‚Ä¢ verification_results.json - Chi ti·∫øt verification")
    print(f"   ‚Ä¢ rollback_suspicious.sh - Script rollback n·∫øu c·∫ßn")

if __name__ == "__main__":
    main()
