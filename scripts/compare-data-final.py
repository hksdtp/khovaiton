#!/usr/bin/env python3
"""
Script cu·ªëi c√πng ƒë·ªÉ so s√°nh d·ªØ li·ªáu d·ª± √°n v·ªõi file giavonmoi.xlsx
C√≥ l·ªçc d·ªØ li·ªáu v√† ph√¢n t√≠ch chi ti·∫øt
"""

import openpyxl
import json
import csv
import os
import re
from pathlib import Path

def is_valid_fabric_code(code):
    """Ki·ªÉm tra xem c√≥ ph·∫£i m√£ v·∫£i h·ª£p l·ªá kh√¥ng"""
    if not code or not isinstance(code, str):
        return False
    
    code = str(code).strip()
    
    # Lo·∫°i b·ªè c√°c d√≤ng ghi ch√∫
    invalid_patterns = [
        r'^[0-9]+\.',  # B·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† d·∫•u ch·∫•m (nh∆∞ "1.", "2.")
        r'l∆∞u √Ω',
        r'v·∫£i ƒë∆∞·ª£c ki·ªÉm tra',
        r's·ªë l∆∞·ª£ng v·∫£i',
        r'ch∆∞a ki·ªÉm tra',
        r'ph∆∞∆°ng ph√°p',
        r'ki·ªÉm k√™',
        r'ch·∫•t l∆∞·ª£ng',
        r'ngo·∫°i quan'
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, code.lower()):
            return False
    
    # M√£ v·∫£i h·ª£p l·ªá th∆∞·ªùng c√≥ ƒë·ªô d√†i t·ª´ 2-50 k√Ω t·ª± v√† ch·ª©a √≠t nh·∫•t 1 ch·ªØ c√°i ho·∫∑c s·ªë
    if len(code) < 2 or len(code) > 50:
        return False
    
    # Ph·∫£i ch·ª©a √≠t nh·∫•t 1 k√Ω t·ª± ch·ªØ ho·∫∑c s·ªë
    if not re.search(r'[a-zA-Z0-9]', code):
        return False
    
    return True

def read_excel_filtered():
    """ƒê·ªçc file Excel v·ªõi l·ªçc d·ªØ li·ªáu"""
    try:
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return None
            
        print("üìñ ƒêang ƒë·ªçc file giavonmoi.xlsx...")
        
        workbook = openpyxl.load_workbook(excel_path)
        sheet_names = workbook.sheetnames
        print(f"üìã Sheets c√≥ s·∫µn: {sheet_names}")
        
        # ∆Øu ti√™n sheet "GV"
        sheet_name = "GV" if "GV" in sheet_names else sheet_names[0]
        sheet = workbook[sheet_name]
        print(f"üìä ƒê·ªçc sheet: {sheet_name}")
        
        # ƒê·ªçc header t·ª´ d√≤ng 2
        headers = []
        for cell in sheet[2]:
            headers.append(cell.value if cell.value else "")
        
        print(f"üìã Headers: {headers}")
        
        # T√¨m c·ªôt m√£ h√†ng
        code_column_index = None
        for i, header in enumerate(headers):
            if header and 'm√£ h√†ng' in str(header).lower():
                code_column_index = i
                break
        
        if code_column_index is None:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt 'M√£ h√†ng'")
            return None
        
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ d√≤ng 3
        data = []
        valid_count = 0
        invalid_count = 0
        
        for row in sheet.iter_rows(min_row=3, values_only=True):
            if row and len(row) > code_column_index:
                code = row[code_column_index]
                
                if is_valid_fabric_code(code):
                    row_data = {}
                    for i, value in enumerate(row):
                        if i < len(headers):
                            row_data[headers[i]] = value
                    data.append(row_data)
                    valid_count += 1
                else:
                    invalid_count += 1
                    if code:  # Ch·ªâ log nh·ªØng d√≤ng c√≥ n·ªôi dung
                        print(f"   ‚ö†Ô∏è  B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá: {str(code)[:50]}...")
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {valid_count} d√≤ng h·ª£p l·ªá, b·ªè qua {invalid_count} d√≤ng kh√¥ng h·ª£p l·ªá")
        return {'data': data, 'headers': headers, 'sheet_name': sheet_name}
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file Excel: {e}")
        return None

def read_csv_data():
    """ƒê·ªçc file CSV hi·ªán t·∫°i"""
    csv_path = Path("public/fabric_inventory_updated.csv")
    if not csv_path.exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y file fabric_inventory_updated.csv")
        return None
    
    try:
        data = []
        with open(csv_path, 'r', encoding='utf-8') as f:
            reader = csv.DictReader(f)
            headers = reader.fieldnames
            for row in reader:
                # L·ªçc nh·ªØng d√≤ng c√≥ m√£ h√†ng h·ª£p l·ªá
                code = row.get('Ma_hang', '')
                if is_valid_fabric_code(code):
                    data.append(row)
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {len(data)} d√≤ng h·ª£p l·ªá t·ª´ CSV")
        return {'data': data, 'headers': headers}
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc CSV: {e}")
        return None

def normalize_code(code):
    """Chu·∫©n h√≥a m√£ v·∫£i"""
    if not code:
        return ""
    return str(code).strip().upper()

def compare_detailed(excel_data, csv_data):
    """So s√°nh chi ti·∫øt"""
    print("\n" + "="*60)
    print("üîç SO S√ÅNH CHI TI·∫æT D·ªÆ LI·ªÜU")
    print("="*60)
    
    # Thu th·∫≠p m√£ v·∫£i
    excel_codes = set()
    csv_codes = set()
    excel_dict = {}
    csv_dict = {}
    
    # X·ª≠ l√Ω Excel
    for row in excel_data['data']:
        code = normalize_code(row.get('M√£ h√†ng'))
        if code:
            excel_codes.add(code)
            excel_dict[code] = row
    
    # X·ª≠ l√Ω CSV
    for row in csv_data['data']:
        code = normalize_code(row.get('Ma_hang'))
        if code:
            csv_codes.add(code)
            csv_dict[code] = row
    
    # So s√°nh
    missing_in_csv = excel_codes - csv_codes
    extra_in_csv = csv_codes - excel_codes
    common_codes = excel_codes & csv_codes
    
    print(f"\nüìä K·∫æT QU·∫¢ SO S√ÅNH CHI TI·∫æT:")
    print(f"   üìà Excel (sau l·ªçc): {len(excel_codes)} m√£ v·∫£i")
    print(f"   üìà CSV (sau l·ªçc):   {len(csv_codes)} m√£ v·∫£i")
    print(f"   ‚úÖ M√£ chung: {len(common_codes)} m√£ v·∫£i")
    print(f"   ‚ùå Thi·∫øu trong CSV: {len(missing_in_csv)} m√£ v·∫£i")
    print(f"   ‚ûï Th·ª´a trong CSV: {len(extra_in_csv)} m√£ v·∫£i")
    
    # Ph√¢n t√≠ch chi ti·∫øt c√°c m√£ thi·∫øu
    if missing_in_csv:
        print(f"\n‚ùå CHI TI·∫æT M√É THI·∫æU TRONG CSV:")
        for i, code in enumerate(list(missing_in_csv)[:10]):
            excel_row = excel_dict[code]
            name = excel_row.get('T√™n h√†ng', '')
            quantity = excel_row.get('S·ªë l∆∞·ª£ng ', '')
            location = excel_row.get('V·ªã tr√≠', '')
            print(f"   {i+1}. {code}")
            print(f"      üìù T√™n: {name}")
            print(f"      üì¶ SL: {quantity}")
            print(f"      üìç V·ªã tr√≠: {location}")
            print()
    
    # Ph√¢n t√≠ch chi ti·∫øt c√°c m√£ th·ª´a
    if extra_in_csv:
        print(f"\n‚ûï CHI TI·∫æT M√É TH·ª™A TRONG CSV:")
        for i, code in enumerate(list(extra_in_csv)[:10]):
            csv_row = csv_dict[code]
            name = csv_row.get('Ten_hang', '')
            quantity = csv_row.get('So_luong', '')
            location = csv_row.get('Vi_tri', '')
            print(f"   {i+1}. {code}")
            print(f"      üìù T√™n: {name}")
            print(f"      üì¶ SL: {quantity}")
            print(f"      üìç V·ªã tr√≠: {location}")
            print()
    
    # So s√°nh d·ªØ li·ªáu cho c√°c m√£ chung
    differences = []
    print(f"\nüîç KI·ªÇM TRA S·ª∞ KH√ÅC BI·ªÜT CHO {min(10, len(common_codes))} M√É CHUNG:")
    for i, code in enumerate(list(common_codes)[:10]):
        excel_row = excel_dict[code]
        csv_row = csv_dict[code]
        
        row_diffs = []
        
        # So s√°nh s·ªë l∆∞·ª£ng
        excel_qty = str(excel_row.get('S·ªë l∆∞·ª£ng ', '')).strip()
        csv_qty = str(csv_row.get('So_luong', '')).strip()
        
        if excel_qty != csv_qty:
            row_diffs.append(f"SL: Excel={excel_qty}, CSV={csv_qty}")
        
        # So s√°nh t√™n
        excel_name = str(excel_row.get('T√™n h√†ng', '')).strip()
        csv_name = str(csv_row.get('Ten_hang', '')).strip()
        
        if excel_name != csv_name:
            row_diffs.append(f"T√™n kh√°c nhau")
        
        if row_diffs:
            differences.append({
                'code': code,
                'differences': row_diffs,
                'excel_row': excel_row,
                'csv_row': csv_row
            })
            print(f"   ‚ö†Ô∏è  {code}: {'; '.join(row_diffs)}")
    
    # T·∫°o b√°o c√°o cu·ªëi c√πng
    create_final_report(excel_codes, csv_codes, missing_in_csv, extra_in_csv, common_codes, differences, excel_dict, csv_dict)
    
    return {
        'excel_total': len(excel_codes),
        'csv_total': len(csv_codes),
        'missing_in_csv': missing_in_csv,
        'extra_in_csv': extra_in_csv,
        'common_codes': common_codes,
        'differences': differences
    }

def create_final_report(excel_codes, csv_codes, missing_in_csv, extra_in_csv, common_codes, differences, excel_dict, csv_dict):
    """T·∫°o b√°o c√°o cu·ªëi c√πng"""
    
    match_percentage = (len(common_codes) / len(excel_codes) * 100) if excel_codes else 0
    
    report_content = f"""# üìä B√ÅO C√ÅO SO S√ÅNH D·ªÆ LI·ªÜU CU·ªêI C√ôNG - GIAVONMOI.XLSX

## üìà T·ªïng quan (sau l·ªçc d·ªØ li·ªáu):
- **Excel (giavonmoi.xlsx):** {len(excel_codes)} m√£ v·∫£i h·ª£p l·ªá
- **CSV hi·ªán t·∫°i:** {len(csv_codes)} m√£ v·∫£i h·ª£p l·ªá
- **M√£ v·∫£i chung:** {len(common_codes)} m√£ v·∫£i
- **Thi·∫øu trong CSV:** {len(missing_in_csv)} m√£ v·∫£i
- **Th·ª´a trong CSV:** {len(extra_in_csv)} m√£ v·∫£i
- **ƒê·ªô kh·ªõp:** {match_percentage:.1f}%

## ‚úÖ ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu:
"""
    
    if match_percentage >= 95:
        report_content += "üü¢ **XU·∫§T S·∫ÆC** - D·ªØ li·ªáu kh·ªõp r·∫•t cao\n"
    elif match_percentage >= 90:
        report_content += "üü° **T·ªêT** - D·ªØ li·ªáu kh·ªõp cao\n"
    elif match_percentage >= 80:
        report_content += "üü† **TRUNG B√åNH** - C·∫ßn c·∫£i thi·ªán\n"
    else:
        report_content += "üî¥ **C·∫¶N CH·ªàNH S·ª¨A** - Nhi·ªÅu s·ª± kh√°c bi·ªát\n"
    
    if missing_in_csv:
        report_content += f"\n## ‚ùå Thi·∫øu trong CSV ({len(missing_in_csv)} m√£):\n"
        for code in list(missing_in_csv)[:20]:
            excel_row = excel_dict.get(code, {})
            name = excel_row.get('T√™n h√†ng', '')
            report_content += f"- **{code}** - {name}\n"
        
        if len(missing_in_csv) > 20:
            report_content += f"- ... v√† {len(missing_in_csv) - 20} m√£ kh√°c\n"
    
    if extra_in_csv:
        report_content += f"\n## ‚ûï Th·ª´a trong CSV ({len(extra_in_csv)} m√£):\n"
        for code in list(extra_in_csv)[:20]:
            csv_row = csv_dict.get(code, {})
            name = csv_row.get('Ten_hang', '')
            report_content += f"- **{code}** - {name}\n"
        
        if len(extra_in_csv) > 20:
            report_content += f"- ... v√† {len(extra_in_csv) - 20} m√£ kh√°c\n"
    
    if differences:
        report_content += f"\n## ‚ö†Ô∏è S·ª± kh√°c bi·ªát d·ªØ li·ªáu ({len(differences)} m√£):\n"
        for diff in differences[:10]:
            report_content += f"- **{diff['code']}:** {'; '.join(diff['differences'])}\n"
    
    report_content += f"""
## üí° Khuy·∫øn ngh·ªã h√†nh ƒë·ªông:

### üîß ∆Øu ti√™n cao:
1. **Th√™m {len(missing_in_csv)} m√£ v·∫£i thi·∫øu** t·ª´ Excel v√†o CSV
2. **Ki·ªÉm tra {len(extra_in_csv)} m√£ v·∫£i th·ª´a** trong CSV
3. **C·∫≠p nh·∫≠t {len(differences)} m√£ v·∫£i c√≥ s·ª± kh√°c bi·ªát**

### üìä K·∫ø ho·∫°ch c·∫£i thi·ªán:
- **M·ª•c ti√™u:** ƒê·∫°t ƒë·ªô kh·ªõp 100%
- **Th·ªùi gian:** ∆Øu ti√™n trong 1-2 tu·∫ßn
- **Tr√°ch nhi·ªám:** Team data entry

### üìÅ Files ƒë∆∞·ª£c t·∫°o:
- `BAO_CAO_SO_SANH_CUOI_CUNG.md` - B√°o c√°o n√†y
- `ma_vai_thieu_chi_tiet.csv` - Danh s√°ch chi ti·∫øt m√£ thi·∫øu
- `ma_vai_thua_chi_tiet.csv` - Danh s√°ch chi ti·∫øt m√£ th·ª´a
- `du_lieu_khac_biet_chi_tiet.csv` - Chi ti·∫øt s·ª± kh√°c bi·ªát

---
T·∫°o b·ªüi: compare-data-final.py
Th·ªùi gian: {__import__('datetime').datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
    
    # L∆∞u b√°o c√°o
    with open('BAO_CAO_SO_SANH_CUOI_CUNG.md', 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    # T·∫°o CSV chi ti·∫øt cho m√£ thi·∫øu
    if missing_in_csv:
        with open('ma_vai_thieu_chi_tiet.csv', 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['Ma_vai', 'Ten_hang', 'So_luong', 'Vi_tri', 'Ghi_chu'])
            for code in missing_in_csv:
                excel_row = excel_dict.get(code, {})
                writer.writerow([
                    code,
                    excel_row.get('T√™n h√†ng', ''),
                    excel_row.get('S·ªë l∆∞·ª£ng ', ''),
                    excel_row.get('V·ªã tr√≠', ''),
                    'C√≥ trong Excel nh∆∞ng thi·∫øu trong CSV'
                ])
        print(f"üíæ ƒê√£ t·∫°o: ma_vai_thieu_chi_tiet.csv ({len(missing_in_csv)} m√£)")
    
    # T·∫°o CSV chi ti·∫øt cho m√£ th·ª´a
    if extra_in_csv:
        with open('ma_vai_thua_chi_tiet.csv', 'w', encoding='utf-8', newline='') as f:
            writer = csv.writer(f)
            writer.writerow(['Ma_vai', 'Ten_hang', 'So_luong', 'Vi_tri', 'Ghi_chu'])
            for code in extra_in_csv:
                csv_row = csv_dict.get(code, {})
                writer.writerow([
                    code,
                    csv_row.get('Ten_hang', ''),
                    csv_row.get('So_luong', ''),
                    csv_row.get('Vi_tri', ''),
                    'C√≥ trong CSV nh∆∞ng kh√¥ng c√≥ trong Excel'
                ])
        print(f"üíæ ƒê√£ t·∫°o: ma_vai_thua_chi_tiet.csv ({len(extra_in_csv)} m√£)")
    
    print(f"üíæ ƒê√£ t·∫°o b√°o c√°o cu·ªëi c√πng: BAO_CAO_SO_SANH_CUOI_CUNG.md")

def main():
    print("üîç SO S√ÅNH D·ªÆ LI·ªÜU CU·ªêI C√ôNG V·ªöI GIAVONMOI.XLSX")
    print("="*60)
    
    # ƒê·ªçc Excel v·ªõi l·ªçc
    excel_data = read_excel_filtered()
    if not excel_data:
        return
    
    # ƒê·ªçc CSV
    csv_data = read_csv_data()
    if not csv_data:
        return
    
    # So s√°nh chi ti·∫øt
    results = compare_detailed(excel_data, csv_data)
    
    print("\nüéâ HO√ÄN T·∫§T!")
    print("üìÅ Ki·ªÉm tra c√°c file b√°o c√°o chi ti·∫øt ƒë√£ ƒë∆∞·ª£c t·∫°o")

if __name__ == "__main__":
    main()
