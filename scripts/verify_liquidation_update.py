#!/usr/bin/env python3
"""
Script ƒë·ªÉ verify k·∫øt qu·∫£ c·∫≠p nh·∫≠t gi√° thanh l√Ω
"""

import pandas as pd
import os
from supabase import create_client, Client
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

def verify_updates():
    """Verify the liquidation price updates"""
    
    # Connect to Supabase
    supabase_url = os.getenv('SUPABASE_URL')
    supabase_key = os.getenv('SUPABASE_ANON_KEY')
    supabase: Client = create_client(supabase_url, supabase_key)
    
    print("üîç VERIFICATION REPORT - C·∫≠p nh·∫≠t Gi√° Thanh L√Ω")
    print("=" * 60)
    
    # 1. ƒê·ªçc file Excel ƒë·ªÉ so s√°nh
    print("\n1. ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel...")
    df = pd.read_excel('giavonmoi.xlsx', skiprows=1)
    
    # ƒê·∫∑t t√™n c·ªôt
    expected_columns = [
        'STT', 'M√£ h√†ng', 'T√™n h√†ng', 'ƒêVT', 'S·ªë l∆∞·ª£ng', 
        'V·ªã tr√≠', 'Lo·∫°i V·∫£i', 'T√≠nh tr·∫°ng', 'Gi√° v·ªën', 'Gi√° thanh l√Ω', 
        'Ghi ch√∫', 'Gi√° v·∫£i', 'ƒêV gi√°'
    ]
    df.columns = expected_columns[:len(df.columns)]
    
    # L·ªçc records c√≥ gi√° thanh l√Ω
    df_with_price = df[df['Gi√° thanh l√Ω'].notna()].copy()
    print(f"   - Records c√≥ gi√° thanh l√Ω trong Excel: {len(df_with_price)}")
    
    # 2. Ki·ªÉm tra database
    print("\n2. Ki·ªÉm tra database...")
    response = supabase.table('fabrics').select('*').not_.is_('liquidation_price', 'null').execute()
    db_records = response.data
    print(f"   - Records c√≥ liquidation_price trong DB: {len(db_records)}")
    
    # 3. Verification samples
    print("\n3. Ki·ªÉm tra m·∫´u ng·∫´u nhi√™n...")
    
    # L·∫•y 5 m·∫´u t·ª´ Excel
    sample_excel = df_with_price.head(5)
    
    for idx, row in sample_excel.iterrows():
        code = row['M√£ h√†ng']
        excel_price = row['Gi√° thanh l√Ω']
        
        # T√¨m trong database
        db_response = supabase.table('fabrics').select('*').eq('code', str(code)).execute()
        
        if db_response.data:
            db_record = db_response.data[0]
            db_price = db_record.get('liquidation_price')
            
            status = "‚úÖ" if float(db_price) == float(excel_price) else "‚ùå"
            print(f"   {status} {code}: Excel={excel_price} | DB={db_price}")
        else:
            print(f"   ‚ùå {code}: Kh√¥ng t√¨m th·∫•y trong DB")
    
    # 4. Th·ªëng k√™ t·ªïng quan
    print("\n4. Th·ªëng k√™ t·ªïng quan...")
    
    # Ph√¢n b·ªë gi√°
    prices = [float(record['liquidation_price']) for record in db_records]
    unique_prices = set(prices)
    
    print(f"   - C√°c m·ª©c gi√° thanh l√Ω: {sorted(unique_prices)}")
    
    for price in sorted(unique_prices):
        count = prices.count(price)
        print(f"     ‚Ä¢ {price:,.0f} VND: {count} records")
    
    # 5. Records c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y
    print("\n5. Records c·∫≠p nh·∫≠t g·∫ßn ƒë√¢y (5 m·ªõi nh·∫•t)...")
    recent_response = supabase.table('fabrics').select('code, name, liquidation_price, updated_at').not_.is_('liquidation_price', 'null').order('updated_at', desc=True).limit(5).execute()
    
    for record in recent_response.data:
        print(f"   - {record['code']}: {record['liquidation_price']:>10} VND | {record['updated_at']}")
    
    # 6. Ki·ªÉm tra l·ªói
    print("\n6. Ki·ªÉm tra c√°c tr∆∞·ªùng h·ª£p l·ªói...")
    
    # ƒê·ªçc b√°o c√°o l·ªói t·ª´ file JSON
    import json
    try:
        with open('liquidation_price_update_report_20250814_142729.json', 'r', encoding='utf-8') as f:
            report = json.load(f)
        
        if report['errors']:
            print(f"   - S·ªë l·ªói: {len(report['errors'])}")
            for error in report['errors']:
                print(f"     ‚Ä¢ {error}")
        else:
            print("   - Kh√¥ng c√≥ l·ªói")
            
    except FileNotFoundError:
        print("   - Kh√¥ng t√¨m th·∫•y file b√°o c√°o")
    
    print("\n" + "=" * 60)
    print("‚úÖ VERIFICATION HO√ÄN TH√ÄNH")

if __name__ == "__main__":
    verify_updates()
