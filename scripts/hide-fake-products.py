#!/usr/bin/env python3
"""
Script ƒë·ªÉ ·∫©n nh·ªØng s·∫£n ph·∫©m kh√¥ng c√≥ trong giavonmoi.xlsx (d·ªØ li·ªáu ·∫£o)
Ch·ªâ hi·ªÉn th·ªã nh·ªØng s·∫£n ph·∫©m c√≥ th·∫≠t t·ª´ file Excel
"""

import openpyxl
import json
import urllib.request
import urllib.parse
import re
from pathlib import Path
from datetime import datetime

# Supabase configuration
SUPABASE_URL = 'https://zgrfqkytbmahxcbgpkxx.supabase.co'
SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpncmZxa3l0Ym1haHhjYmdwa3h4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNjI1MTAsImV4cCI6MjA2MTczODUxMH0.a6giZZFMrj6jBhLip3ShOFCyTHt5dbe31UDGCECh0Zs'

def is_valid_fabric_code(code):
    """Ki·ªÉm tra xem c√≥ ph·∫£i m√£ v·∫£i h·ª£p l·ªá kh√¥ng"""
    if not code or not isinstance(code, str):
        return False
    
    code = str(code).strip()
    
    # Lo·∫°i b·ªè c√°c d√≤ng ghi ch√∫
    invalid_patterns = [
        r'^[0-9]+\.',  # B·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† d·∫•u ch·∫•m
        r'l∆∞u √Ω',
        r'v·∫£i ƒë∆∞·ª£c ki·ªÉm tra',
        r's·ªë l∆∞·ª£ng v·∫£i',
        r'ch∆∞a ki·ªÉm tra',
        r'ph∆∞∆°ng ph√°p',
        r'ki·ªÉm k√™',
        r'ch·∫•t l∆∞·ª£ng',
        r'ngo·∫°i quan'
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, code.lower()):
            return False
    
    if len(code) < 2 or len(code) > 100:
        return False
    
    if not re.search(r'[a-zA-Z0-9]', code):
        return False
    
    return True

def normalize_code(code):
    """Chu·∫©n h√≥a m√£ v·∫£i ƒë·ªÉ so s√°nh"""
    if not code:
        return ""
    return str(code).strip().upper()

def read_real_codes_from_excel():
    """ƒê·ªçc danh s√°ch m√£ v·∫£i th·∫≠t t·ª´ giavonmoi.xlsx"""
    try:
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return set()
            
        print("üìñ ƒêang ƒë·ªçc danh s√°ch m√£ v·∫£i th·∫≠t t·ª´ giavonmoi.xlsx...")
        
        workbook = openpyxl.load_workbook(excel_path)
        
        # ∆Øu ti√™n sheet "GV"
        sheet_name = "GV" if "GV" in workbook.sheetnames else workbook.sheetnames[0]
        sheet = workbook[sheet_name]
        print(f"üìä ƒê·ªçc sheet: {sheet_name}")
        
        # ƒê·ªçc m√£ v·∫£i t·ª´ d√≤ng 3, c·ªôt B (index 1)
        real_codes = set()
        valid_count = 0
        invalid_count = 0
        
        for row_num, row in enumerate(sheet.iter_rows(min_row=3, values_only=True), start=3):
            if not row or len(row) <= 1:
                continue
                
            # L·∫•y m√£ h√†ng (c·ªôt B - index 1)
            code = row[1] if len(row) > 1 else None
            
            if is_valid_fabric_code(code):
                normalized_code = normalize_code(code)
                real_codes.add(normalized_code)
                valid_count += 1
            else:
                invalid_count += 1
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {valid_count} m√£ v·∫£i th·∫≠t, b·ªè qua {invalid_count} d√≤ng kh√¥ng h·ª£p l·ªá")
        return real_codes
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file Excel: {e}")
        return set()

def supabase_request(method, endpoint, data=None):
    """Th·ª±c hi·ªán request ƒë·∫øn Supabase API"""
    url = f"{SUPABASE_URL}/rest/v1/{endpoint}"
    
    headers = {
        'apikey': SUPABASE_ANON_KEY,
        'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
        'Content-Type': 'application/json',
        'Prefer': 'return=minimal'
    }
    
    try:
        if data:
            data_bytes = json.dumps(data).encode('utf-8')
            req = urllib.request.Request(url, data=data_bytes, headers=headers, method=method)
        else:
            req = urllib.request.Request(url, headers=headers, method=method)
        
        with urllib.request.urlopen(req) as response:
            return response.getcode(), response.read().decode('utf-8')
            
    except urllib.error.HTTPError as e:
        return e.code, e.read().decode('utf-8')
    except Exception as e:
        return 0, str(e)

def get_all_products_from_supabase():
    """L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ Supabase"""
    print("üì• ƒêang l·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ Supabase...")
    
    status_code, response = supabase_request('GET', 'fabrics?select=id,code,name,is_hidden')
    
    if status_code == 200:
        try:
            products = json.loads(response)
            print(f"‚úÖ ƒê√£ l·∫•y {len(products)} s·∫£n ph·∫©m t·ª´ Supabase")
            return products
        except Exception as e:
            print(f"‚ùå L·ªói parse response: {e}")
            return []
    else:
        print(f"‚ùå L·ªói l·∫•y d·ªØ li·ªáu: {status_code} - {response}")
        return []

def hide_fake_products(real_codes, all_products):
    """·∫®n nh·ªØng s·∫£n ph·∫©m kh√¥ng c√≥ trong danh s√°ch th·∫≠t"""
    print("\nüîç Ph√¢n t√≠ch s·∫£n ph·∫©m...")
    
    real_products = []
    fake_products = []
    already_hidden = []
    
    for product in all_products:
        code = normalize_code(product['code'])
        
        if code in real_codes:
            real_products.append(product)
        else:
            if product['is_hidden']:
                already_hidden.append(product)
            else:
                fake_products.append(product)
    
    print(f"üìä K·∫øt qu·∫£ ph√¢n t√≠ch:")
    print(f"   ‚úÖ S·∫£n ph·∫©m th·∫≠t: {len(real_products)}")
    print(f"   ‚ùå S·∫£n ph·∫©m ·∫£o c·∫ßn ·∫©n: {len(fake_products)}")
    print(f"   üîí ƒê√£ ·∫©n tr∆∞·ªõc ƒë√≥: {len(already_hidden)}")
    
    if len(fake_products) == 0:
        print("‚úÖ Kh√¥ng c√≥ s·∫£n ph·∫©m ·∫£o n√†o c·∫ßn ·∫©n!")
        return 0
    
    print(f"\nüîí ƒêang ·∫©n {len(fake_products)} s·∫£n ph·∫©m ·∫£o...")
    
    # ·∫®n t·ª´ng s·∫£n ph·∫©m ·∫£o
    hidden_count = 0
    failed_count = 0
    
    for i, product in enumerate(fake_products):
        print(f"   üîí {i+1}/{len(fake_products)}: ·∫®n {product['code']} - {product['name'][:50]}...")
        
        # Update is_hidden = true
        update_data = {'is_hidden': True}
        status_code, response = supabase_request('PATCH', f"fabrics?id=eq.{product['id']}", update_data)
        
        if status_code in [200, 204]:
            hidden_count += 1
        else:
            failed_count += 1
            print(f"      ‚ùå L·ªói ·∫©n {product['code']}: {status_code} - {response}")
    
    print(f"\nüìä K·∫øt qu·∫£ ·∫©n s·∫£n ph·∫©m:")
    print(f"   ‚úÖ ƒê√£ ·∫©n th√†nh c√¥ng: {hidden_count}")
    print(f"   ‚ùå Th·∫•t b·∫°i: {failed_count}")
    
    return hidden_count

def show_real_products(real_codes, all_products):
    """Hi·ªÉn th·ªã l·∫°i nh·ªØng s·∫£n ph·∫©m th·∫≠t ƒë√£ b·ªã ·∫©n nh·∫ßm"""
    print("\nüëÅÔ∏è Ki·ªÉm tra s·∫£n ph·∫©m th·∫≠t b·ªã ·∫©n nh·∫ßm...")
    
    hidden_real_products = []
    
    for product in all_products:
        code = normalize_code(product['code'])
        
        if code in real_codes and product['is_hidden']:
            hidden_real_products.append(product)
    
    if len(hidden_real_products) == 0:
        print("‚úÖ Kh√¥ng c√≥ s·∫£n ph·∫©m th·∫≠t n√†o b·ªã ·∫©n nh·∫ßm!")
        return 0
    
    print(f"üëÅÔ∏è ƒêang hi·ªÉn th·ªã l·∫°i {len(hidden_real_products)} s·∫£n ph·∫©m th·∫≠t...")
    
    shown_count = 0
    failed_count = 0
    
    for i, product in enumerate(hidden_real_products):
        print(f"   üëÅÔ∏è {i+1}/{len(hidden_real_products)}: Hi·ªán {product['code']} - {product['name'][:50]}...")
        
        # Update is_hidden = false
        update_data = {'is_hidden': False}
        status_code, response = supabase_request('PATCH', f"fabrics?id=eq.{product['id']}", update_data)
        
        if status_code in [200, 204]:
            shown_count += 1
        else:
            failed_count += 1
            print(f"      ‚ùå L·ªói hi·ªán {product['code']}: {status_code} - {response}")
    
    print(f"\nüìä K·∫øt qu·∫£ hi·ªÉn th·ªã s·∫£n ph·∫©m th·∫≠t:")
    print(f"   ‚úÖ ƒê√£ hi·ªÉn th·ªã th√†nh c√¥ng: {shown_count}")
    print(f"   ‚ùå Th·∫•t b·∫°i: {failed_count}")
    
    return shown_count

def create_report(real_codes, all_products, hidden_count, shown_count):
    """T·∫°o b√°o c√°o chi ti·∫øt"""
    
    real_products = []
    fake_products = []
    
    for product in all_products:
        code = normalize_code(product['code'])
        
        if code in real_codes:
            real_products.append(product)
        else:
            fake_products.append(product)
    
    report_content = f"""# üìä B√ÅO C√ÅO ·∫®N S·∫¢N PH·∫®M ·∫¢O

## üìà T·ªïng quan:
- **File tham chi·∫øu:** giavonmoi.xlsx (Sheet: GV)
- **M√£ v·∫£i th·∫≠t:** {len(real_codes)} m√£
- **T·ªïng s·∫£n ph·∫©m trong Supabase:** {len(all_products)}
- **S·∫£n ph·∫©m th·∫≠t:** {len(real_products)}
- **S·∫£n ph·∫©m ·∫£o:** {len(fake_products)}

## üéØ K·∫øt qu·∫£ th·ª±c hi·ªán:
- **ƒê√£ ·∫©n s·∫£n ph·∫©m ·∫£o:** {hidden_count}
- **ƒê√£ hi·ªÉn th·ªã s·∫£n ph·∫©m th·∫≠t:** {shown_count}

## ‚úÖ Tr·∫°ng th√°i sau khi x·ª≠ l√Ω:
- **Hi·ªÉn th·ªã:** Ch·ªâ s·∫£n ph·∫©m c√≥ trong giavonmoi.xlsx
- **·∫®n:** T·∫•t c·∫£ s·∫£n ph·∫©m kh√¥ng c√≥ trong file Excel (d·ªØ li·ªáu ·∫£o)

## üìã Danh s√°ch s·∫£n ph·∫©m ·∫£o ƒë√£ ·∫©n:
"""
    
    # Li·ªát k√™ m·ªôt s·ªë s·∫£n ph·∫©m ·∫£o
    fake_list = [p for p in all_products if normalize_code(p['code']) not in real_codes]
    for i, product in enumerate(fake_list[:20]):  # Ch·ªâ hi·ªÉn th·ªã 20 ƒë·∫ßu
        report_content += f"{i+1}. **{product['code']}** - {product['name']}\n"
    
    if len(fake_list) > 20:
        report_content += f"... v√† {len(fake_list) - 20} s·∫£n ph·∫©m ·∫£o kh√°c\n"
    
    report_content += f"""
## üí° L·ª£i √≠ch:
- ‚úÖ Web app ch·ªâ hi·ªÉn th·ªã d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx
- ‚úÖ Lo·∫°i b·ªè ho√†n to√†n d·ªØ li·ªáu ·∫£o/mock
- ‚úÖ TƒÉng ƒë·ªô tin c·∫≠y c·ªßa h·ªá th·ªëng
- ‚úÖ D·ªØ li·ªáu ch√≠nh x√°c 100%

## üöÄ B∆∞·ªõc ti·∫øp theo:
1. Restart web app ƒë·ªÉ load d·ªØ li·ªáu m·ªõi
2. Ki·ªÉm tra giao di·ªán - ch·ªâ hi·ªÉn th·ªã s·∫£n ph·∫©m th·∫≠t
3. Test c√°c ch·ª©c nƒÉng search, filter

---
T·∫°o b·ªüi: hide-fake-products.py
Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
    
    # L∆∞u b√°o c√°o
    with open('BAO_CAO_AN_SAN_PHAM_AO.md', 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üíæ ƒê√£ t·∫°o b√°o c√°o: BAO_CAO_AN_SAN_PHAM_AO.md")

def main():
    print("üöÄ B·∫ÆT ƒê·∫¶U ·∫®N S·∫¢N PH·∫®M ·∫¢O")
    print("="*50)
    
    # 1. ƒê·ªçc danh s√°ch m√£ v·∫£i th·∫≠t t·ª´ Excel
    real_codes = read_real_codes_from_excel()
    if not real_codes:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu th·∫≠t ƒë·ªÉ tham chi·∫øu")
        return
    
    print(f"üìã ƒê√£ c√≥ {len(real_codes)} m√£ v·∫£i th·∫≠t t·ª´ giavonmoi.xlsx")
    
    # 2. L·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m t·ª´ Supabase
    all_products = get_all_products_from_supabase()
    if not all_products:
        print("‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Supabase")
        return
    
    # 3. Hi·ªÉn th·ªã s·∫£n ph·∫©m th·∫≠t (n·∫øu b·ªã ·∫©n nh·∫ßm)
    shown_count = show_real_products(real_codes, all_products)
    
    # 4. ·∫®n s·∫£n ph·∫©m ·∫£o
    hidden_count = hide_fake_products(real_codes, all_products)
    
    # 5. T·∫°o b√°o c√°o
    create_report(real_codes, all_products, hidden_count, shown_count)
    
    print("\nüéâ HO√ÄN T·∫§T!")
    print(f"‚úÖ ƒê√£ ·∫©n {hidden_count} s·∫£n ph·∫©m ·∫£o")
    print(f"‚úÖ ƒê√£ hi·ªÉn th·ªã {shown_count} s·∫£n ph·∫©m th·∫≠t")
    print("üìÅ Ki·ªÉm tra file BAO_CAO_AN_SAN_PHAM_AO.md")
    print("\nüí° B∆∞·ªõc ti·∫øp theo: Restart web app ƒë·ªÉ th·∫•y k·∫øt qu·∫£!")

if __name__ == "__main__":
    main()
