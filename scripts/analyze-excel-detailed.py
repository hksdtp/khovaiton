#!/usr/bin/env python3
"""
Script ƒë·ªÉ ph√¢n t√≠ch chi ti·∫øt file giavonmoi.xlsx
T√¨m hi·ªÉu t·∫°i sao c√≥ s·ª± kh√°c bi·ªát gi·ªØa s·ªë l∆∞·ª£ng ƒë·∫øm ƒë∆∞·ª£c v√† s·ªë l∆∞·ª£ng import th√†nh c√¥ng
"""

import openpyxl
import re
from pathlib import Path

def is_valid_fabric_code(code):
    """Ki·ªÉm tra xem c√≥ ph·∫£i m√£ v·∫£i h·ª£p l·ªá kh√¥ng"""
    if not code or not isinstance(code, str):
        return False
    
    code = str(code).strip()
    
    # Lo·∫°i b·ªè c√°c d√≤ng ghi ch√∫
    invalid_patterns = [
        r'^[0-9]+\.',  # B·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† d·∫•u ch·∫•m
        r'l∆∞u √Ω',
        r'v·∫£i ƒë∆∞·ª£c ki·ªÉm tra',
        r's·ªë l∆∞·ª£ng v·∫£i',
        r'ch∆∞a ki·ªÉm tra',
        r'ph∆∞∆°ng ph√°p',
        r'ki·ªÉm k√™',
        r'ch·∫•t l∆∞·ª£ng',
        r'ngo·∫°i quan'
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, code.lower()):
            return False
    
    if len(code) < 2 or len(code) > 100:
        return False
    
    if not re.search(r'[a-zA-Z0-9]', code):
        return False
    
    return True

def analyze_excel_detailed():
    """Ph√¢n t√≠ch chi ti·∫øt file Excel"""
    try:
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return
            
        print("üîç PH√ÇN T√çCH CHI TI·∫æT FILE GIAVONMOI.XLSX")
        print("="*60)
        
        workbook = openpyxl.load_workbook(excel_path)
        
        # Li·ªát k√™ t·∫•t c·∫£ sheets
        print(f"üìä Sheets c√≥ s·∫µn: {workbook.sheetnames}")
        
        # ∆Øu ti√™n sheet "GV"
        sheet_name = "GV" if "GV" in workbook.sheetnames else workbook.sheetnames[0]
        sheet = workbook[sheet_name]
        print(f"üìã ƒêang ph√¢n t√≠ch sheet: {sheet_name}")
        
        # ƒê·ªçc header t·ª´ d√≤ng 2
        headers = []
        for cell in sheet[2]:
            headers.append(cell.value if cell.value else "")
        
        print(f"üìù Headers (d√≤ng 2): {headers}")
        
        # Ph√¢n t√≠ch t·ª´ng d√≤ng
        all_rows = []
        valid_rows = []
        invalid_rows = []
        empty_rows = []
        duplicate_codes = {}
        
        total_rows = 0
        
        for row_num, row in enumerate(sheet.iter_rows(min_row=3, values_only=True), start=3):
            total_rows += 1
            
            if not row or len(row) == 0 or all(cell is None or str(cell).strip() == '' for cell in row):
                empty_rows.append({
                    'row_num': row_num,
                    'content': 'D√≤ng tr·ªëng'
                })
                continue
                
            # L·∫•y m√£ h√†ng (c·ªôt B - index 1)
            code = row[1] if len(row) > 1 else None
            
            row_info = {
                'row_num': row_num,
                'code': str(code).strip() if code else '',
                'name': str(row[2]).strip() if len(row) > 2 and row[2] else '',
                'full_row': [str(cell) if cell is not None else '' for cell in row[:11]]
            }
            
            all_rows.append(row_info)
            
            if is_valid_fabric_code(code):
                valid_rows.append(row_info)
                
                # Ki·ªÉm tra duplicate
                code_normalized = str(code).strip().upper()
                if code_normalized in duplicate_codes:
                    duplicate_codes[code_normalized].append(row_num)
                else:
                    duplicate_codes[code_normalized] = [row_num]
            else:
                invalid_rows.append(row_info)
        
        # T√¨m duplicates
        actual_duplicates = {code: rows for code, rows in duplicate_codes.items() if len(rows) > 1}
        
        print(f"\nüìä TH·ªêNG K√ä T·ªîNG QUAN:")
        print(f"   üìã T·ªïng s·ªë d√≤ng t·ª´ d√≤ng 3: {total_rows}")
        print(f"   üì¶ D√≤ng c√≥ d·ªØ li·ªáu: {len(all_rows)}")
        print(f"   ‚úÖ D√≤ng h·ª£p l·ªá: {len(valid_rows)}")
        print(f"   ‚ùå D√≤ng kh√¥ng h·ª£p l·ªá: {len(invalid_rows)}")
        print(f"   üî≥ D√≤ng tr·ªëng: {len(empty_rows)}")
        print(f"   üîÑ M√£ tr√πng l·∫∑p: {len(actual_duplicates)} m√£")
        
        # Chi ti·∫øt d√≤ng kh√¥ng h·ª£p l·ªá
        if invalid_rows:
            print(f"\n‚ùå CHI TI·∫æT D√íNG KH√îNG H·ª¢P L·ªÜ ({len(invalid_rows)} d√≤ng):")
            for i, row in enumerate(invalid_rows[:10]):  # Ch·ªâ hi·ªÉn th·ªã 10 d√≤ng ƒë·∫ßu
                print(f"   {i+1}. D√≤ng {row['row_num']}: '{row['code']}' - {row['name'][:50]}...")
            if len(invalid_rows) > 10:
                print(f"   ... v√† {len(invalid_rows) - 10} d√≤ng kh√°c")
        
        # Chi ti·∫øt d√≤ng tr·ªëng
        if empty_rows:
            print(f"\nüî≥ CHI TI·∫æT D√íNG TR·ªêNG ({len(empty_rows)} d√≤ng):")
            for i, row in enumerate(empty_rows[:5]):  # Ch·ªâ hi·ªÉn th·ªã 5 d√≤ng ƒë·∫ßu
                print(f"   {i+1}. D√≤ng {row['row_num']}: {row['content']}")
            if len(empty_rows) > 5:
                print(f"   ... v√† {len(empty_rows) - 5} d√≤ng kh√°c")
        
        # Chi ti·∫øt m√£ tr√πng l·∫∑p
        if actual_duplicates:
            print(f"\nüîÑ CHI TI·∫æT M√É TR√ôNG L·∫∂P ({len(actual_duplicates)} m√£):")
            for i, (code, rows) in enumerate(list(actual_duplicates.items())[:5]):
                print(f"   {i+1}. M√£ '{code}' xu·∫•t hi·ªán t·∫°i d√≤ng: {rows}")
            if len(actual_duplicates) > 5:
                print(f"   ... v√† {len(actual_duplicates) - 5} m√£ kh√°c")
        
        # Ph√¢n t√≠ch nguy√™n nh√¢n kh√°c bi·ªát
        print(f"\nüîç PH√ÇN T√çCH NGUY√äN NH√ÇN KH√ÅC BI·ªÜT:")
        print(f"   üìä B·∫°n ƒë·∫øm ƒë∆∞·ª£c: 332 s·∫£n ph·∫©m")
        print(f"   ‚úÖ Script ƒë·ªçc ƒë∆∞·ª£c: {len(valid_rows)} s·∫£n ph·∫©m h·ª£p l·ªá")
        print(f"   üì§ ƒê√£ import th√†nh c√¥ng: 325 s·∫£n ph·∫©m")
        
        difference_count_vs_valid = 332 - len(valid_rows)
        difference_valid_vs_imported = len(valid_rows) - 325
        
        print(f"\nüìà PH√ÇN T√çCH S·ª∞ KH√ÅC BI·ªÜT:")
        print(f"   üî¢ Kh√°c bi·ªát gi·ªØa ƒë·∫øm tay (332) v√† script ({len(valid_rows)}): {difference_count_vs_valid}")
        print(f"   üî¢ Kh√°c bi·ªát gi·ªØa script ({len(valid_rows)}) v√† import (325): {difference_valid_vs_imported}")
        
        # Gi·∫£i th√≠ch c√≥ th·ªÉ
        print(f"\nüí° NGUY√äN NH√ÇN C√ì TH·ªÇ:")
        if difference_count_vs_valid > 0:
            print(f"   1. C√≥ {difference_count_vs_valid} d√≤ng b·∫°n ƒë·∫øm nh∆∞ng script coi l√† kh√¥ng h·ª£p l·ªá")
            print(f"      - C√≥ th·ªÉ l√† d√≤ng ghi ch√∫, header, ho·∫∑c d·ªØ li·ªáu kh√¥ng ƒë√∫ng format")
        
        if difference_valid_vs_imported > 0:
            print(f"   2. C√≥ {difference_valid_vs_imported} s·∫£n ph·∫©m h·ª£p l·ªá nh∆∞ng kh√¥ng import ƒë∆∞·ª£c")
            print(f"      - C√≥ th·ªÉ do m√£ tr√πng l·∫∑p trong database")
            print(f"      - Ho·∫∑c l·ªói khi insert v√†o Supabase")
        
        if len(actual_duplicates) > 0:
            print(f"   3. C√≥ {len(actual_duplicates)} m√£ b·ªã tr√πng l·∫∑p trong Excel")
            print(f"      - Database ch·ªâ cho ph√©p 1 record cho m·ªói m√£")
        
        # T·∫°o b√°o c√°o chi ti·∫øt
        report_content = f"""# üîç B√ÅO C√ÅO PH√ÇN T√çCH CHI TI·∫æT GIAVONMOI.XLSX

## üìä Th·ªëng k√™ t·ªïng quan:
- **T·ªïng s·ªë d√≤ng t·ª´ d√≤ng 3:** {total_rows}
- **D√≤ng c√≥ d·ªØ li·ªáu:** {len(all_rows)}
- **D√≤ng h·ª£p l·ªá:** {len(valid_rows)}
- **D√≤ng kh√¥ng h·ª£p l·ªá:** {len(invalid_rows)}
- **D√≤ng tr·ªëng:** {len(empty_rows)}
- **M√£ tr√πng l·∫∑p:** {len(actual_duplicates)} m√£

## üî¢ So s√°nh s·ªë li·ªáu:
- **B·∫°n ƒë·∫øm ƒë∆∞·ª£c:** 332 s·∫£n ph·∫©m
- **Script ƒë·ªçc ƒë∆∞·ª£c:** {len(valid_rows)} s·∫£n ph·∫©m h·ª£p l·ªá
- **ƒê√£ import th√†nh c√¥ng:** 325 s·∫£n ph·∫©m

## üìà Ph√¢n t√≠ch s·ª± kh√°c bi·ªát:
- **Kh√°c bi·ªát ƒë·∫øm tay vs script:** {difference_count_vs_valid}
- **Kh√°c bi·ªát script vs import:** {difference_valid_vs_imported}

## ‚ùå D√≤ng kh√¥ng h·ª£p l·ªá ({len(invalid_rows)} d√≤ng):
"""
        
        for i, row in enumerate(invalid_rows[:20]):
            report_content += f"{i+1}. D√≤ng {row['row_num']}: '{row['code']}' - {row['name'][:50]}\n"
        
        if len(invalid_rows) > 20:
            report_content += f"... v√† {len(invalid_rows) - 20} d√≤ng kh√°c\n"
        
        if actual_duplicates:
            report_content += f"\n## üîÑ M√£ tr√πng l·∫∑p ({len(actual_duplicates)} m√£):\n"
            for i, (code, rows) in enumerate(list(actual_duplicates.items())[:10]):
                report_content += f"{i+1}. M√£ '{code}' xu·∫•t hi·ªán t·∫°i d√≤ng: {rows}\n"
        
        report_content += f"""
## üí° K·∫øt lu·∫≠n:
S·ª± kh√°c bi·ªát gi·ªØa 332 (ƒë·∫øm tay) v√† 325 (import th√†nh c√¥ng) c√≥ th·ªÉ do:
1. **{len(invalid_rows)} d√≤ng kh√¥ng h·ª£p l·ªá** (ghi ch√∫, header, format sai)
2. **{len(actual_duplicates)} m√£ tr√πng l·∫∑p** (database ch·ªâ l∆∞u 1 record/m√£)
3. **{len(empty_rows)} d√≤ng tr·ªëng**
4. **L·ªói import** m·ªôt s·ªë records

## üéØ Khuy·∫øn ngh·ªã:
- Ki·ªÉm tra l·∫°i c√°c d√≤ng kh√¥ng h·ª£p l·ªá
- X·ª≠ l√Ω m√£ tr√πng l·∫∑p trong Excel
- ƒê·∫£m b·∫£o format d·ªØ li·ªáu nh·∫•t qu√°n

---
T·∫°o b·ªüi: analyze-excel-detailed.py
"""
        
        # L∆∞u b√°o c√°o
        with open('BAO_CAO_PHAN_TICH_EXCEL_CHI_TIET.md', 'w', encoding='utf-8') as f:
            f.write(report_content)
        
        print(f"\nüíæ ƒê√£ t·∫°o b√°o c√°o chi ti·∫øt: BAO_CAO_PHAN_TICH_EXCEL_CHI_TIET.md")
        
        return {
            'total_rows': total_rows,
            'valid_rows': len(valid_rows),
            'invalid_rows': len(invalid_rows),
            'empty_rows': len(empty_rows),
            'duplicates': len(actual_duplicates),
            'all_data': all_rows,
            'valid_data': valid_rows,
            'invalid_data': invalid_rows
        }
        
    except Exception as e:
        print(f"‚ùå L·ªói ph√¢n t√≠ch file Excel: {e}")
        return None

def main():
    print("üîç B·∫ÆT ƒê·∫¶U PH√ÇN T√çCH CHI TI·∫æT EXCEL")
    print("="*50)
    
    result = analyze_excel_detailed()
    
    if result:
        print(f"\nüéâ HO√ÄN T·∫§T PH√ÇN T√çCH!")
        print(f"üìã Ki·ªÉm tra file BAO_CAO_PHAN_TICH_EXCEL_CHI_TIET.md ƒë·ªÉ xem chi ti·∫øt")

if __name__ == "__main__":
    main()
