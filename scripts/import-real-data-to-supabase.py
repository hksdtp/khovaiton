#!/usr/bin/env python3
"""
Script ƒë·ªÉ import d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx v√†o Supabase
Thay th·∫ø ho√†n to√†n d·ªØ li·ªáu gi·∫£ b·∫±ng d·ªØ li·ªáu th·∫≠t
"""

import openpyxl
import requests
import json
import re
from pathlib import Path
from datetime import datetime

# Supabase configuration
SUPABASE_URL = 'https://zgrfqkytbmahxcbgpkxx.supabase.co'
SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InpncmZxa3l0Ym1haHhjYmdwa3h4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYxNjI1MTAsImV4cCI6MjA2MTczODUxMH0.a6giZZFMrj6jBhLip3ShOFCyTHt5dbe31UDGCECh0Zs'

def is_valid_fabric_code(code):
    """Ki·ªÉm tra xem c√≥ ph·∫£i m√£ v·∫£i h·ª£p l·ªá kh√¥ng"""
    if not code or not isinstance(code, str):
        return False
    
    code = str(code).strip()
    
    # Lo·∫°i b·ªè c√°c d√≤ng ghi ch√∫
    invalid_patterns = [
        r'^[0-9]+\.',  # B·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† d·∫•u ch·∫•m
        r'l∆∞u √Ω',
        r'v·∫£i ƒë∆∞·ª£c ki·ªÉm tra',
        r's·ªë l∆∞·ª£ng v·∫£i',
        r'ch∆∞a ki·ªÉm tra',
        r'ph∆∞∆°ng ph√°p',
        r'ki·ªÉm k√™',
        r'ch·∫•t l∆∞·ª£ng',
        r'ngo·∫°i quan'
    ]
    
    for pattern in invalid_patterns:
        if re.search(pattern, code.lower()):
            return False
    
    # M√£ v·∫£i h·ª£p l·ªá
    if len(code) < 2 or len(code) > 100:
        return False
    
    if not re.search(r'[a-zA-Z0-9]', code):
        return False
    
    return True

def normalize_quantity(qty_str):
    """Chu·∫©n h√≥a s·ªë l∆∞·ª£ng"""
    if not qty_str:
        return 0
    
    try:
        # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn ƒë·ªïi
        qty_str = str(qty_str).strip()
        return float(qty_str)
    except:
        return 0

def normalize_status(status_str):
    """Chu·∫©n h√≥a tr·∫°ng th√°i"""
    if not status_str:
        return 'available'
    
    status = str(status_str).lower().strip()
    
    if any(keyword in status for keyword in ['l·ªói', 'b·∫©n', 'm·ªëc', 'h·ªèng']):
        return 'damaged'
    elif any(keyword in status for keyword in ['h·∫øt', 'kh√¥ng c√≥']):
        return 'out_of_stock'
    elif any(keyword in status for keyword in ['√≠t', 's·∫Øp h·∫øt']):
        return 'low_stock'
    else:
        return 'available'

def read_real_data_from_excel():
    """ƒê·ªçc d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx"""
    try:
        excel_path = Path("giavonmoi.xlsx")
        if not excel_path.exists():
            print("‚ùå Kh√¥ng t√¨m th·∫•y file giavonmoi.xlsx")
            return []
            
        print("üìñ ƒêang ƒë·ªçc d·ªØ li·ªáu th·∫≠t t·ª´ giavonmoi.xlsx...")
        
        workbook = openpyxl.load_workbook(excel_path)
        
        # ∆Øu ti√™n sheet "GV"
        sheet_name = "GV" if "GV" in workbook.sheetnames else workbook.sheetnames[0]
        sheet = workbook[sheet_name]
        print(f"üìä ƒê·ªçc sheet: {sheet_name}")
        
        # ƒê·ªçc header t·ª´ d√≤ng 2
        headers = []
        for cell in sheet[2]:
            headers.append(cell.value if cell.value else "")
        
        print(f"üìã Headers: {headers}")
        
        # Mapping columns
        column_mapping = {
            'STT': 'stt',
            'M√£ h√†ng': 'code',
            'T√™n h√†ng': 'name',
            'ƒêVT': 'unit',
            'S·ªë l∆∞·ª£ng ': 'quantity',
            'V·ªã tr√≠': 'location',
            'Lo·∫°i V·∫£i': 'type',
            'T√≠nh tr·∫°ng': 'status',
            'Gi√° v·ªën': 'cost_price',
            'Gi√° thanh l√Ω': 'sale_price',
            'Ghi ch√∫': 'note'
        }
        
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ d√≤ng 3
        fabrics = []
        valid_count = 0
        invalid_count = 0
        
        for row_num, row in enumerate(sheet.iter_rows(min_row=3, values_only=True), start=3):
            if not row or len(row) == 0:
                continue
                
            # L·∫•y m√£ h√†ng (c·ªôt B - index 1)
            code = row[1] if len(row) > 1 else None
            
            if not is_valid_fabric_code(code):
                invalid_count += 1
                if code:
                    print(f"   ‚ö†Ô∏è  B·ªè qua d√≤ng {row_num}: {str(code)[:50]}...")
                continue
            
            # T·∫°o fabric object
            fabric = {
                'code': str(code).strip(),
                'name': str(row[2]).strip() if len(row) > 2 and row[2] else f"V·∫£i {code}",
                'unit': str(row[3]).strip() if len(row) > 3 and row[3] else 'm',
                'quantity': normalize_quantity(row[4] if len(row) > 4 else 0),
                'location': str(row[5]).strip() if len(row) > 5 and row[5] else 'Unknown',
                'type': str(row[6]).strip() if len(row) > 6 and row[6] else 'fabric',
                'status': normalize_status(row[7] if len(row) > 7 else ''),
                'cost_price': normalize_quantity(row[8] if len(row) > 8 else 0),
                'sale_price': normalize_quantity(row[9] if len(row) > 9 else 0),
                'note': str(row[10]).strip() if len(row) > 10 and row[10] else '',
                'is_hidden': False,
                'image': '',  # S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau
                'created_at': datetime.now().isoformat(),
                'updated_at': datetime.now().isoformat()
            }
            
            fabrics.append(fabric)
            valid_count += 1
        
        print(f"‚úÖ ƒê√£ ƒë·ªçc {valid_count} s·∫£n ph·∫©m h·ª£p l·ªá, b·ªè qua {invalid_count} d√≤ng kh√¥ng h·ª£p l·ªá")
        return fabrics
        
    except Exception as e:
        print(f"‚ùå L·ªói ƒë·ªçc file Excel: {e}")
        return []

def clear_existing_data():
    """X√≥a d·ªØ li·ªáu c≈© trong Supabase"""
    print("üóëÔ∏è ƒêang x√≥a d·ªØ li·ªáu c≈© trong Supabase...")
    
    try:
        # X√≥a t·∫•t c·∫£ records
        response = requests.delete(
            f"{SUPABASE_URL}/rest/v1/fabrics",
            headers={
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
                'Content-Type': 'application/json'
            },
            params={'select': '*'}  # X√≥a t·∫•t c·∫£
        )
        
        if response.status_code in [200, 204]:
            print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈© th√†nh c√¥ng")
            return True
        else:
            print(f"‚ùå L·ªói x√≥a d·ªØ li·ªáu: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception khi x√≥a d·ªØ li·ªáu: {e}")
        return False

def insert_real_data(fabrics):
    """Insert d·ªØ li·ªáu th·∫≠t v√†o Supabase"""
    print(f"üì§ ƒêang insert {len(fabrics)} s·∫£n ph·∫©m v√†o Supabase...")
    
    # Insert theo batch ƒë·ªÉ tr√°nh timeout
    batch_size = 50
    total_inserted = 0
    
    for i in range(0, len(fabrics), batch_size):
        batch = fabrics[i:i + batch_size]
        
        try:
            response = requests.post(
                f"{SUPABASE_URL}/rest/v1/fabrics",
                headers={
                    'apikey': SUPABASE_ANON_KEY,
                    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
                    'Content-Type': 'application/json',
                    'Prefer': 'return=minimal'
                },
                json=batch
            )
            
            if response.status_code in [200, 201]:
                total_inserted += len(batch)
                print(f"   ‚úÖ Batch {i//batch_size + 1}: Inserted {len(batch)} records ({total_inserted}/{len(fabrics)})")
            else:
                print(f"   ‚ùå Batch {i//batch_size + 1} failed: {response.status_code} - {response.text}")
                
        except Exception as e:
            print(f"   ‚ùå Exception in batch {i//batch_size + 1}: {e}")
    
    print(f"‚úÖ Ho√†n t·∫•t! ƒê√£ insert {total_inserted}/{len(fabrics)} s·∫£n ph·∫©m")
    return total_inserted

def verify_data():
    """Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c import"""
    print("üîç Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ import...")
    
    try:
        response = requests.get(
            f"{SUPABASE_URL}/rest/v1/fabrics",
            headers={
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
                'Content-Type': 'application/json'
            },
            params={'select': 'count', 'head': 'true'}
        )
        
        if response.status_code == 200:
            count = response.headers.get('Content-Range', '0').split('/')[-1]
            print(f"‚úÖ T·ªïng s·ªë records trong Supabase: {count}")
            
            # L·∫•y sample data
            sample_response = requests.get(
                f"{SUPABASE_URL}/rest/v1/fabrics",
                headers={
                    'apikey': SUPABASE_ANON_KEY,
                    'Authorization': f'Bearer {SUPABASE_ANON_KEY}',
                    'Content-Type': 'application/json'
                },
                params={'select': 'code,name,quantity,location', 'limit': 5}
            )
            
            if sample_response.status_code == 200:
                sample_data = sample_response.json()
                print("üìã Sample data:")
                for item in sample_data:
                    print(f"   ‚Ä¢ {item['code']} - {item['name']} ({item['quantity']} t·∫°i {item['location']})")
            
            return True
        else:
            print(f"‚ùå L·ªói ki·ªÉm tra: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception khi ki·ªÉm tra: {e}")
        return False

def create_summary_report(fabrics, inserted_count):
    """T·∫°o b√°o c√°o t·ªïng h·ª£p"""
    report_content = f"""# üìä B√ÅO C√ÅO IMPORT D·ªÆ LI·ªÜU TH·∫¨T - GIAVONMOI.XLSX

## üìà T·ªïng quan:
- **File ngu·ªìn:** giavonmoi.xlsx (Sheet: GV)
- **D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c:** {len(fabrics)} s·∫£n ph·∫©m
- **ƒê√£ import v√†o Supabase:** {inserted_count} s·∫£n ph·∫©m
- **T·ª∑ l·ªá th√†nh c√¥ng:** {(inserted_count/len(fabrics)*100):.1f}%

## üìä Th·ªëng k√™ d·ªØ li·ªáu:
- **T·ªïng s·ªë l∆∞·ª£ng v·∫£i:** {sum(f['quantity'] for f in fabrics):.1f} {fabrics[0]['unit'] if fabrics else 'ƒë∆°n v·ªã'}
- **V·ªã tr√≠ l∆∞u tr·ªØ:** {len(set(f['location'] for f in fabrics))} v·ªã tr√≠ kh√°c nhau
- **Lo·∫°i v·∫£i:** {len(set(f['type'] for f in fabrics if f['type']))} lo·∫°i kh√°c nhau

## üè∑Ô∏è Top 10 s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng:
"""
    
    # Sort by quantity v√† l·∫•y top 10
    top_products = sorted(fabrics, key=lambda x: x['quantity'], reverse=True)[:10]
    for i, product in enumerate(top_products, 1):
        report_content += f"{i}. **{product['code']}** - {product['name']} ({product['quantity']} {product['unit']})\n"
    
    report_content += f"""
## üìç Ph√¢n b·ªë theo v·ªã tr√≠:
"""
    
    # Th·ªëng k√™ theo v·ªã tr√≠
    location_stats = {}
    for fabric in fabrics:
        loc = fabric['location']
        if loc not in location_stats:
            location_stats[loc] = {'count': 0, 'total_qty': 0}
        location_stats[loc]['count'] += 1
        location_stats[loc]['total_qty'] += fabric['quantity']
    
    for location, stats in sorted(location_stats.items(), key=lambda x: x[1]['count'], reverse=True)[:10]:
        report_content += f"- **{location}:** {stats['count']} s·∫£n ph·∫©m ({stats['total_qty']:.1f} ƒë∆°n v·ªã)\n"
    
    report_content += f"""
## ‚ö†Ô∏è Tr·∫°ng th√°i s·∫£n ph·∫©m:
"""
    
    # Th·ªëng k√™ theo tr·∫°ng th√°i
    status_stats = {}
    for fabric in fabrics:
        status = fabric['status']
        status_stats[status] = status_stats.get(status, 0) + 1
    
    for status, count in status_stats.items():
        status_name = {
            'available': 'C√≥ s·∫µn',
            'damaged': 'H·ªèng/L·ªói',
            'low_stock': 'S·∫Øp h·∫øt',
            'out_of_stock': 'H·∫øt h√†ng'
        }.get(status, status)
        report_content += f"- **{status_name}:** {count} s·∫£n ph·∫©m\n"
    
    report_content += f"""
## üéØ K·∫øt qu·∫£:
- ‚úÖ ƒê√£ thay th·∫ø ho√†n to√†n d·ªØ li·ªáu gi·∫£ b·∫±ng d·ªØ li·ªáu th·∫≠t
- ‚úÖ Web app s·∫Ω hi·ªÉn th·ªã {inserted_count} s·∫£n ph·∫©m th·∫≠t t·ª´ Excel
- ‚úÖ D·ªØ li·ªáu ƒë∆∞·ª£c ƒë·ªìng b·ªô realtime t·ª´ Supabase
- ‚úÖ T·∫•t c·∫£ th√¥ng tin (m√£, t√™n, s·ªë l∆∞·ª£ng, v·ªã tr√≠) ƒë·ªÅu ch√≠nh x√°c

## üí° B∆∞·ªõc ti·∫øp theo:
1. Restart web app ƒë·ªÉ load d·ªØ li·ªáu m·ªõi
2. Ki·ªÉm tra hi·ªÉn th·ªã tr√™n giao di·ªán
3. C·∫≠p nh·∫≠t ·∫£nh cho c√°c s·∫£n ph·∫©m (n·∫øu c·∫ßn)
4. Test c√°c ch·ª©c nƒÉng search, filter

---
T·∫°o b·ªüi: import-real-data-to-supabase.py
Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
"""
    
    # L∆∞u b√°o c√°o
    with open('BAO_CAO_IMPORT_DU_LIEU_THAT.md', 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"üíæ ƒê√£ t·∫°o b√°o c√°o: BAO_CAO_IMPORT_DU_LIEU_THAT.md")

def main():
    print("üöÄ B·∫ÆT ƒê·∫¶U IMPORT D·ªÆ LI·ªÜU TH·∫¨T T·ª™ GIAVONMOI.XLSX")
    print("="*60)
    
    # 1. ƒê·ªçc d·ªØ li·ªáu t·ª´ Excel
    fabrics = read_real_data_from_excel()
    if not fabrics:
        print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ import")
        return
    
    print(f"\nüìä S·∫Ω import {len(fabrics)} s·∫£n ph·∫©m th·∫≠t v√†o Supabase")
    
    # X√°c nh·∫≠n t·ª´ user
    confirm = input("\n‚ö†Ô∏è  C·∫¢NH B√ÅO: Thao t√°c n√†y s·∫Ω X√ìA T·∫§T C·∫¢ d·ªØ li·ªáu c≈© v√† thay th·∫ø b·∫±ng d·ªØ li·ªáu th·∫≠t.\nB·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): ")
    
    if confirm.lower() != 'y':
        print("‚ùå ƒê√£ h·ªßy import")
        return
    
    # 2. X√≥a d·ªØ li·ªáu c≈©
    if not clear_existing_data():
        print("‚ùå Kh√¥ng th·ªÉ x√≥a d·ªØ li·ªáu c≈©")
        return
    
    # 3. Insert d·ªØ li·ªáu m·ªõi
    inserted_count = insert_real_data(fabrics)
    
    # 4. Ki·ªÉm tra k·∫øt qu·∫£
    if verify_data():
        print("\nüéâ IMPORT TH√ÄNH C√îNG!")
        
        # 5. T·∫°o b√°o c√°o
        create_summary_report(fabrics, inserted_count)
        
        print("\nüìã T√≥m t·∫Øt:")
        print(f"   ‚úÖ ƒê√£ import {inserted_count} s·∫£n ph·∫©m th·∫≠t")
        print(f"   ‚úÖ Thay th·∫ø ho√†n to√†n d·ªØ li·ªáu gi·∫£")
        print(f"   ‚úÖ Web app s·∫Ω hi·ªÉn th·ªã d·ªØ li·ªáu th·∫≠t")
        print("\nüí° B∆∞·ªõc ti·∫øp theo: Restart web app ƒë·ªÉ load d·ªØ li·ªáu m·ªõi!")
        
    else:
        print("‚ùå Import kh√¥ng th√†nh c√¥ng ho√†n to√†n")

if __name__ == "__main__":
    main()
