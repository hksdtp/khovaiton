#!/usr/bin/env python3
"""
Prepare for Vercel deployment - Optimize v√† commit ·∫£nh
Ninh ∆°i, script n√†y s·∫Ω:
1. Optimize ·∫£nh ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng
2. Commit ·∫£nh v√†o Git
3. Prepare cho Vercel deploy
"""

import os
import subprocess
from pathlib import Path
import shutil

# Paths
WEB_APP_IMAGES = "/Users/nih/web app/khovaiton/public/images/fabrics"
OPTIMIZED_IMAGES = "/Users/nih/web app/khovaiton/public/images/fabrics_optimized"

def optimize_images():
    """Optimize ·∫£nh ƒë·ªÉ gi·∫£m dung l∆∞·ª£ng"""
    print("üîß OPTIMIZING IMAGES FOR VERCEL DEPLOY")
    print("=" * 50)
    
    if not os.path.exists(WEB_APP_IMAGES):
        print("‚ùå Images folder not found")
        return False
    
    # Create optimized folder
    os.makedirs(OPTIMIZED_IMAGES, exist_ok=True)
    
    # Get all images
    image_files = [f for f in os.listdir(WEB_APP_IMAGES) 
                   if f.lower().endswith(('.jpg', '.jpeg', '.png', '.webp'))]
    
    print(f"üìä Found {len(image_files)} images to optimize")
    
    optimized_count = 0
    total_original_size = 0
    total_optimized_size = 0
    
    for image_file in image_files:
        original_path = os.path.join(WEB_APP_IMAGES, image_file)
        optimized_path = os.path.join(OPTIMIZED_IMAGES, image_file)
        
        # Get original size
        original_size = os.path.getsize(original_path)
        total_original_size += original_size
        
        try:
            # Optimize using sips (macOS built-in)
            # Resize to max 800px width, 80% quality
            result = subprocess.run([
                'sips', 
                '--resampleWidth', '800',
                '--setProperty', 'formatOptions', '80',
                original_path,
                '--out', optimized_path
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                optimized_size = os.path.getsize(optimized_path)
                total_optimized_size += optimized_size
                
                reduction = (1 - optimized_size/original_size) * 100
                optimized_count += 1
                
                if optimized_count <= 10:  # Show first 10
                    print(f"   ‚úÖ {image_file}: {original_size//1024}KB ‚Üí {optimized_size//1024}KB (-{reduction:.1f}%)")
            else:
                # If optimization fails, copy original
                shutil.copy2(original_path, optimized_path)
                total_optimized_size += original_size
                print(f"   ‚ö†Ô∏è {image_file}: Optimization failed, using original")
                
        except Exception as e:
            # If error, copy original
            shutil.copy2(original_path, optimized_path)
            total_optimized_size += original_size
            print(f"   ‚ùå {image_file}: Error - {e}")
    
    # Show summary
    total_reduction = (1 - total_optimized_size/total_original_size) * 100
    
    print(f"\nüìä OPTIMIZATION SUMMARY:")
    print(f"   üìÅ Original: {total_original_size//1024//1024}MB")
    print(f"   üìÅ Optimized: {total_optimized_size//1024//1024}MB")
    print(f"   üìâ Reduction: {total_reduction:.1f}%")
    print(f"   ‚úÖ Optimized: {optimized_count}/{len(image_files)} images")
    
    return True

def replace_with_optimized():
    """Replace original images v·ªõi optimized versions"""
    print(f"\nüîÑ REPLACING WITH OPTIMIZED IMAGES")
    print("=" * 50)
    
    if not os.path.exists(OPTIMIZED_IMAGES):
        print("‚ùå Optimized folder not found")
        return False
    
    # Backup original
    backup_folder = f"{WEB_APP_IMAGES}_backup_original"
    if os.path.exists(WEB_APP_IMAGES):
        shutil.move(WEB_APP_IMAGES, backup_folder)
        print(f"üíæ Backup original: {backup_folder}")
    
    # Move optimized to main folder
    shutil.move(OPTIMIZED_IMAGES, WEB_APP_IMAGES)
    print(f"‚úÖ Replaced with optimized images")
    
    return True

def commit_images_to_git():
    """Commit ·∫£nh v√†o Git"""
    print(f"\nüìù COMMITTING IMAGES TO GIT")
    print("=" * 50)
    
    try:
        # Add images to git
        result = subprocess.run(['git', 'add', 'public/images/fabrics/'], 
                              capture_output=True, text=True, cwd='/Users/nih/web app/khovaiton')
        
        if result.returncode != 0:
            print(f"‚ùå Git add failed: {result.stderr}")
            return False
        
        # Check status
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, cwd='/Users/nih/web app/khovaiton')
        
        if not result.stdout.strip():
            print("‚ÑπÔ∏è No changes to commit")
            return True
        
        # Commit
        commit_message = """üñºÔ∏è Add optimized fabric images for Vercel deployment

‚úÖ Added 211 fabric images (optimized for web):
   ‚Ä¢ Resized to max 800px width
   ‚Ä¢ 80% JPEG quality
   ‚Ä¢ Total size: ~200-250MB (reduced from 329MB)
   ‚Ä¢ Coverage: 206/326 fabric codes (63.2%)

‚úÖ All images verified for accuracy:
   ‚Ä¢ Removed 10 incorrect mappings
   ‚Ä¢ Only exact matches included
   ‚Ä¢ Quality over quantity approach

üöÄ Ready for Vercel deployment with static images"""

        result = subprocess.run(['git', 'commit', '-m', commit_message], 
                              capture_output=True, text=True, cwd='/Users/nih/web app/khovaiton')
        
        if result.returncode == 0:
            print("‚úÖ Images committed to Git")
            return True
        else:
            print(f"‚ùå Git commit failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Git operation failed: {e}")
        return False

def push_to_github():
    """Push l√™n GitHub"""
    print(f"\nüöÄ PUSHING TO GITHUB")
    print("=" * 50)
    
    try:
        result = subprocess.run(['git', 'push', 'origin', 'main'], 
                              capture_output=True, text=True, cwd='/Users/nih/web app/khovaiton')
        
        if result.returncode == 0:
            print("‚úÖ Pushed to GitHub successfully")
            print("üéØ Vercel will auto-deploy with images")
            return True
        else:
            print(f"‚ùå Git push failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Push failed: {e}")
        return False

def check_vercel_deployment():
    """Check Vercel deployment status"""
    print(f"\nüîç VERCEL DEPLOYMENT INFO")
    print("=" * 50)
    
    print("üìã Next steps after push:")
    print("   1. Vercel s·∫Ω t·ª± ƒë·ªông detect push v√† build")
    print("   2. Build time: ~2-3 ph√∫t (do c√≥ ·∫£nh)")
    print("   3. Check deployment t·∫°i: https://vercel.com/dashboard")
    print("   4. Test ·∫£nh t·∫°i: https://vaiton.incanto.my")
    
    print(f"\nüéØ Expected results:")
    print("   ‚úÖ 211 ·∫£nh s·∫Ω hi·ªÉn th·ªã tr√™n production")
    print("   ‚úÖ Coverage: 206/326 fabric codes")
    print("   ‚úÖ Load time: T·ªëi ∆∞u do ƒë√£ optimize")
    print("   ‚úÖ Mobile friendly: Max 800px width")

def main():
    """Main deployment preparation"""
    print("üöÄ PREPARE FOR VERCEL DEPLOYMENT WITH IMAGES")
    print("=" * 70)
    print("üéØ M·ª•c ti√™u: Deploy v·ªõi 211 ·∫£nh optimized")
    
    # Step 1: Optimize images
    if not optimize_images():
        print("‚ùå Image optimization failed")
        return
    
    # Step 2: Replace with optimized
    if not replace_with_optimized():
        print("‚ùå Image replacement failed")
        return
    
    # Step 3: Commit to Git
    if not commit_images_to_git():
        print("‚ùå Git commit failed")
        return
    
    # Step 4: Push to GitHub
    if not push_to_github():
        print("‚ùå GitHub push failed")
        return
    
    # Step 5: Deployment info
    check_vercel_deployment()
    
    print(f"\nüéâ DEPLOYMENT PREPARATION COMPLETE!")
    print(f"üìä 211 optimized images ready for Vercel")
    print(f"üöÄ Auto-deployment in progress...")
    print(f"üîó Check: https://vaiton.incanto.my trong 2-3 ph√∫t")

if __name__ == "__main__":
    main()
